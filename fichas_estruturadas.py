# fichas_estruturadas.py
import re
import json
import asyncio
import discord
from discord.ext import commands
from discord.ui import View, Button
from utils import chamar_groq, get_system_prompt, key_from_name
from config import fichas_personagens, sistemas_rpg, sessoes_ativas
from sistemas_rpg import SISTEMAS_DISPONIVEIS, resolver_alias
import os

DATA_DIR = os.path.join(os.getcwd(), "bot_data")
FICHAS_PATH = os.path.join(DATA_DIR, "fichas_personagens.json")

# ========== ESTRUTURA DE FICHA POR SISTEMA ==========

ESTRUTURA_FICHAS = {
    "dnd5e": {
        "secoes": ["basico", "atributos", "recursos", "combate", "equipamento", "magia", "historia"],
        "campos": {
            "basico": ["Nome", "Ra√ßa", "Classe", "N√≠vel", "Antecedente", "Alinhamento"],
            "atributos": ["For√ßa", "Destreza", "Constitui√ß√£o", "Intelig√™ncia", "Sabedoria", "Carisma"],
            "recursos": ["HP M√°ximo", "HP Atual", "Dados de Vida", "Profici√™ncia"],
            "combate": ["CA", "Iniciativa", "Velocidade", "Ataques"],
            "equipamento": ["Armas", "Armadura", "Itens", "Dinheiro"],
            "magia": ["N√≠vel de Conjurador", "CD de Magia", "B√¥nus de Ataque", "Espa√ßos de Magia", "Magias Conhecidas"],
            "historia": ["Personalidade", "Ideais", "V√≠nculos", "Defeitos", "Hist√≥ria"]
        }
    },
    "pathfinder": {
        "secoes": ["basico", "atributos", "recursos", "combate", "equipamento", "magia", "historia"],
        "campos": {
            "basico": ["Nome", "Ancestralidade", "Classe", "N√≠vel", "Background", "Divindade"],
            "atributos": ["For√ßa", "Destreza", "Constitui√ß√£o", "Intelig√™ncia", "Sabedoria", "Carisma"],
            "recursos": ["HP M√°ximo", "HP Atual", "Pontos Heroicos", "Profici√™ncias"],
            "combate": ["CA", "Fortitude", "Reflexos", "Vontade", "Velocidade", "Ataques"],
            "equipamento": ["Armas", "Armadura", "Itens M√°gicos", "Investidos", "Ouro"],
            "magia": ["Tradi√ß√£o", "CD", "Ataque", "Pontos de Foco", "Magias Preparadas"],
            "historia": ["Personalidade", "Cren√ßas", "Hist√≥ria"]
        }
    },
    "cthulhu": {
        "secoes": ["basico", "atributos", "recursos", "combate", "pericia", "historia"],
        "campos": {
            "basico": ["Nome", "Ocupa√ß√£o", "Idade", "Sexo", "Resid√™ncia", "Local de Nascimento"],
            "atributos": ["FOR", "CON", "TAM", "DES", "APA", "INT", "POD", "EDU", "SOR"],
            "recursos": ["HP M√°ximo", "HP Atual", "Sanidade M√°xima", "Sanidade Atual", "Magia", "Movimento"],
            "combate": ["Dano B√¥nus", "Constitui√ß√£o", "Esquiva", "Armas"],
            "pericia": ["Per√≠cias de Investiga√ß√£o", "Per√≠cias Interpessoais", "Per√≠cias de Combate", "Outras"],
            "historia": ["Descri√ß√£o Pessoal", "Ideologia", "Pessoas Importantes", "Locais Significativos", "Posses Valiosas", "Tra√ßos", "Feridas e Cicatrizes"]
        }
    },
    "shadowrun": {
        "secoes": ["basico", "atributos", "recursos", "combate", "equipamento", "magia", "historia"],
        "campos": {
            "basico": ["Nome", "Metatipo", "Arqu√©tipo", "Idade", "Sexo", "Estilo de Vida"],
            "atributos": ["Corpo", "Agilidade", "Rea√ß√£o", "For√ßa", "For√ßa de Vontade", "L√≥gica", "Intui√ß√£o", "Carisma"],
            "recursos": ["Ess√™ncia", "Magia", "Resson√¢ncia", "Borda", "Iniciativa", "Karma"],
            "combate": ["Monitores de Dano", "Defesas", "Limiar de Dor", "Armas"],
            "equipamento": ["Cyberware", "Bioware", "Equipamento", "Ve√≠culos", "Nuyen"],
            "magia": ["Tradi√ß√£o", "Feiti√ßos", "Formas de Conjura√ß√£o", "Esp√≠ritos Vinculados"],
            "historia": ["Conceito", "Contatos", "Inimigos", "Hist√≥ria"]
        }
    },
    "vampire": {
        "secoes": ["basico", "atributos", "recursos", "disciplinas", "equipamento", "historia"],
        "campos": {
            "basico": ["Nome", "Cl√£", "Gera√ß√£o", "Seita", "Idade Aparente", "Ref√∫gio"],
            "atributos": ["For√ßa", "Destreza", "Vigor", "Carisma", "Manipula√ß√£o", "Compostura", "Intelig√™ncia", "Racioc√≠nio", "Perseveran√ßa"],
            "recursos": ["Sa√∫de", "For√ßa de Vontade", "Humanidade", "Fome", "Pontos de Sangue"],
            "disciplinas": ["Disciplinas de Cl√£", "Disciplinas Adquiridas", "Poderes", "Rituais"],
            "equipamento": ["Recursos", "Ref√∫gios", "Lacaios", "Contatos", "Posses"],
            "historia": ["Abra√ßo", "Sire", "Ambi√ß√£o", "Desejo", "M√°scara", "Juramentos", "Inimigos"]
        }
    }
}

# Template gen√©rico para sistemas n√£o mapeados
ESTRUTURA_GENERICA = {
    "secoes": ["basico", "atributos", "recursos", "combate", "equipamento", "historia"],
    "campos": {
        "basico": ["Nome", "Ra√ßa/Ancestralidade", "Classe/Arqu√©tipo", "N√≠vel", "Conceito"],
        "atributos": ["Atributos Principais"],
        "recursos": ["Pontos de Vida", "Recursos Especiais"],
        "combate": ["Defesa", "Ataques", "Iniciativa"],
        "equipamento": ["Armas", "Armadura", "Itens", "Dinheiro"],
        "historia": ["Personalidade", "Hist√≥ria", "Motiva√ß√µes"]
    }
}

def get_estrutura_ficha(sistema):
    """Retorna a estrutura de ficha apropriada para o sistema."""
    return ESTRUTURA_FICHAS.get(sistema, ESTRUTURA_GENERICA)

# ========== FUN√á√ïES DE PERSIST√äNCIA ==========

def salvar_fichas_agora():
    """SALVA FICHAS IMEDIATAMENTE no arquivo JSON com encoding correto."""
    try:
        os.makedirs(DATA_DIR, exist_ok=True)
        
        # For√ßa encoding UTF-8 explicitamente
        with open(FICHAS_PATH, "w", encoding="utf-8") as f:
            json.dump(fichas_personagens, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ FICHAS SALVAS! Total: {len(fichas_personagens)}")
        return True
    except Exception as e:
        print(f"‚ùå ERRO ao salvar fichas: {e}")
        import traceback
        traceback.print_exc()
        return False

def encontrar_ficha(user_id, nome):
    """Busca ficha do usu√°rio. Prioriza match exato, depois busca parcial."""
    nome_lower = nome.lower().strip()
    
    # 1¬™ tentativa: Match EXATO (ignora case)
    for k, v in fichas_personagens.items():
        if v.get("autor") == user_id:
            if v.get("nome", "").lower().strip() == nome_lower:
                return k, v
    
    # 2¬™ tentativa: Match parcial
    nome_proc = re.sub(r'[^a-z0-9_]+', '', nome_lower)
    for k, v in fichas_personagens.items():
        if v.get("autor") == user_id:
            nome_limpo = re.sub(r'[^a-z0-9_]+', '', v.get("nome", "").lower())
            if nome_proc in nome_limpo or nome_limpo in nome_proc:
                return k, v
    
    return None, None

# ========== VIEW DE NAVEGA√á√ÉO DE FICHAS ==========

class FichaNavigationView(View):
    """View para navegar entre p√°ginas da ficha."""
    
    def __init__(self, ficha_data, sistema, timeout=180):
        super().__init__(timeout=timeout)
        self.ficha_data = ficha_data
        self.sistema = sistema
        self.estrutura = get_estrutura_ficha(sistema)
        self.current_page = 0
        self.max_pages = len(self.estrutura["secoes"])
        
    def get_embed(self):
        """Gera embed para a p√°gina atual."""
        secao_nome = self.estrutura["secoes"][self.current_page]
        campos = self.estrutura["campos"][secao_nome]
        
        # T√≠tulos bonitos para as se√ß√µes
        titulos_secoes = {
            "basico": "üìã Dados B√°sicos",
            "atributos": "üí™ Atributos",
            "recursos": "‚ù§Ô∏è Recursos e Pontos",
            "combate": "‚öîÔ∏è Combate",
            "equipamento": "üéí Equipamento",
            "magia": "‚ú® Magia e Conjura√ß√£o",
            "disciplinas": "ü©∏ Disciplinas Vamp√≠ricas",
            "pericia": "üîç Per√≠cias",
            "historia": "üìñ Hist√≥ria e Personalidade"
        }
        
        titulo = titulos_secoes.get(secao_nome, secao_nome.title())
        
        # Pega dados estruturados ou conte√∫do antigo
        if "secoes" in self.ficha_data and self.ficha_data["secoes"]:
            conteudo_secao = self.ficha_data["secoes"].get(secao_nome, {})
            descricao = ""
            
            # NORMALIZA nomes de campos (remove acentos quebrados)
            for campo in campos:
                # Tenta encontrar o campo com encoding correto OU incorreto
                valor = None
                
                # 1. Tenta nome correto
                if campo in conteudo_secao:
                    valor = conteudo_secao[campo]
                else:
                    # 2. Tenta varia√ß√µes com encoding quebrado
                    campo_lower = campo.lower()
                    for k, v in conteudo_secao.items():
                        if k.lower().replace('√£¬ß', '√ß').replace('√£¬£', '√£').replace('√£¬™', '√™') == campo_lower:
                            valor = v
                            break
                
                if valor is None:
                    valor = "‚Äî"
                
                # Formata o valor
                if isinstance(valor, list):
                    valor = ", ".join(str(item) for item in valor)
                elif isinstance(valor, dict):
                    valor = json.dumps(valor, ensure_ascii=False)
                
                descricao += f"**{campo}:** {valor}\n"
        else:
            # Formato antigo - exibe conte√∫do bruto
            descricao = self.ficha_data.get("conteudo", "Ficha no formato antigo. Use !editarficha para atualizar.")[:4000]
        
        embed = discord.Embed(
            title=f"üìú {self.ficha_data.get('nome', 'Ficha')}",
            description=descricao,
            color=discord.Color.gold()
        )
        
        embed.set_footer(text=f"P√°gina {self.current_page + 1}/{self.max_pages} ‚Ä¢ {titulo} ‚Ä¢ Sistema: {SISTEMAS_DISPONIVEIS[self.sistema]['nome']}")
        
        return embed
    
    @discord.ui.button(label="‚óÄÔ∏è Anterior", style=discord.ButtonStyle.secondary)
    async def previous_button(self, interaction: discord.Interaction, button: Button):
        """Vai para a p√°gina anterior."""
        self.current_page = (self.current_page - 1) % self.max_pages
        await interaction.response.edit_message(embed=self.get_embed(), view=self)
    
    @discord.ui.button(label="‚ñ∂Ô∏è Pr√≥xima", style=discord.ButtonStyle.secondary)
    async def next_button(self, interaction: discord.Interaction, button: Button):
        """Vai para a pr√≥xima p√°gina."""
        self.current_page = (self.current_page + 1) % self.max_pages
        await interaction.response.edit_message(embed=self.get_embed(), view=self)
    
    @discord.ui.button(label="‚ùå Fechar", style=discord.ButtonStyle.danger)
    async def close_button(self, interaction: discord.Interaction, button: Button):
        """Fecha a visualiza√ß√£o."""
        await interaction.message.delete()

# ========== REGISTRO DE COMANDOS ==========

def register(bot: commands.Bot):
    # Remove comandos duplicados
    for cmd in ["ficha", "criarficha", "verficha", "editarficha", "deletarficha",
                "minhasfichas", "converterficha", "exportarficha"]:
        try:
            bot.remove_command(cmd)
        except Exception:
            pass

    # ========== CRIAR FICHA ESTRUTURADA ==========
    @bot.command(name="criarficha")
    async def criar_ficha_estruturada(ctx):
        """Cria uma ficha estruturada atrav√©s de perguntas interativas."""
        sistema = sistemas_rpg.get(ctx.author.id, "dnd5e")
        system_prompt = get_system_prompt(sistema)
        estrutura = get_estrutura_ficha(sistema)
        
        # Deleta comando do usu√°rio
        try:
            await ctx.message.delete()
        except:
            pass
        
        # Envia tudo por DM
        try:
            # Mensagem inicial com preview das perguntas
            await ctx.author.send(
                f"üìù **Cria√ß√£o de Ficha Estruturada**\n"
                f"Sistema: {SISTEMAS_DISPONIVEIS[sistema]['nome']}\n\n"
                f"**Farei estas 8 perguntas para voc√™:**\n"
                f"1Ô∏è‚É£ Nome do personagem\n"
                f"2Ô∏è‚É£ Ra√ßa/Ancestralidade\n"
                f"3Ô∏è‚É£ Classe/Profiss√£o\n"
                f"4Ô∏è‚É£ N√≠vel ou Idade\n"
                f"5Ô∏è‚É£ Personalidade (3-5 tra√ßos)\n"
                f"6Ô∏è‚É£ Apar√™ncia f√≠sica\n"
                f"7Ô∏è‚É£ Background/Origem\n"
                f"8Ô∏è‚É£ Objetivos/Motiva√ß√µes\n\n"
                f"üí° **Dica importante:** Para evitar timeout durante a cria√ß√£o, "
                f"prepare suas respostas mais longas (hist√≥ria, apar√™ncia, objetivos) "
                f"em outro lugar e cole quando chegar a pergunta!\n\n"
                f"Digite `cancelar` a qualquer momento para parar.\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"**1/8** - Qual o **nome** do seu personagem?"
            )
            
            await ctx.send(
                f"‚úÖ {ctx.author.mention}, processo de cria√ß√£o iniciado no privado! "
                f"Confira sua DM.",
                delete_after=10
            )
        
        except discord.Forbidden:
            await ctx.send(
                f"‚ùå {ctx.author.mention}, n√£o consigo te enviar DM! "
                f"Habilite mensagens diretas nas configura√ß√µes.",
                delete_after=15
            )
            return
        
        def check(m):
            return m.author == ctx.author and isinstance(m.channel, discord.DMChannel)
        
        try:
            # Nome
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            nome = msg.content
            
            # Ra√ßa/Ancestralidade
            await ctx.author.send(f"**2/8** - Qual a **ra√ßa/ancestralidade** de {nome}?")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            raca = msg.content
            
            # Classe/Arqu√©tipo
            await ctx.author.send(f"**3/8** - Qual a **classe/profiss√£o** de {nome}?")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            classe = msg.content
            
            # N√≠vel/Idade
            await ctx.author.send(f"**4/8** - Qual o **n√≠vel ou idade** de {nome}? (Ex: N√≠vel 5, ou 28 anos)")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            nivel = msg.content
            
            # Conceito/Personalidade
            await ctx.author.send(f"**5/8** - Descreva a **personalidade** de {nome} (3-5 tra√ßos):")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            conceito = msg.content
            
            # Apar√™ncia
            await ctx.author.send(f"**6/8** - Descreva a **apar√™ncia f√≠sica** de {nome}:")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            aparencia = msg.content
            
            # Background/Hist√≥ria
            await ctx.author.send(f"**7/8** - Qual o **background ou origem** de {nome}?")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            historia = msg.content
            
            # Objetivos/Motiva√ß√µes
            await ctx.author.send(f"**8/8** - Quais os **objetivos ou motiva√ß√µes** de {nome}?")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            objetivos = msg.content
            
            # Gera ficha estruturada com IA
            await ctx.author.send(f"‚ú® Gerando ficha estruturada de **{nome}** com IA...")
            
            # Monta prompt espec√≠fico para formato estruturado
            prompt = f"""Crie uma ficha de personagem COMPLETA, DETALHADA e BALANCEADA para {SISTEMAS_DISPONIVEIS[sistema]['nome']}.

**INFORMA√á√ïES FORNECIDAS PELO JOGADOR:**
- Nome: {nome}
- Ra√ßa/Ancestralidade: {raca}
- Classe/Profiss√£o: {classe}
- N√≠vel/Idade: {nivel}
- Personalidade: {conceito}
- Apar√™ncia F√≠sica: {aparencia}
- Background/Origem: {historia}
- Objetivos/Motiva√ß√µes: {objetivos}

**INSTRU√á√ïES OBRIGAT√ìRIAS:**
1. EXPANDA todas as informa√ß√µes - transforme respostas curtas em descri√ß√µes ricas
2. CALCULE todos os valores num√©ricos apropriados ao n√≠vel
3. PREENCHA 100% dos campos - NENHUM campo pode ficar vazio, com "‚Äî" ou "A definir"
4. CRIE equipamento inicial completo e apropriado
5. ADICIONE habilidades de classe do n√≠vel apropriado
6. DESENVOLVA hist√≥ria em 3-4 par√°grafos envolventes

**FORMATO JSON OBRIGAT√ìRIO - PREENCHA TODOS OS CAMPOS:**

{{
  "basico": {{
    "Nome": "{nome}",
    "Ra√ßa": "[EXPANDIR {raca} com detalhes de sub-ra√ßa]",
    "Classe": "[EXPANDIR {classe} com arqu√©tipo/caminho]",
    "N√≠vel": "[EXTRAIR n√∫mero de: {nivel}]",
    "Antecedente": "[CRIAR baseado em: {historia}]",
    "Alinhamento": "[DEFINIR baseado na personalidade]"
  }},
  "atributos": {{
    "For√ßa": [VALOR 8-18],
    "Destreza": [VALOR 8-18],
    "Constitui√ß√£o": [VALOR 8-18],
    "Intelig√™ncia": [VALOR 8-18],
    "Sabedoria": [VALOR 8-18],
    "Carisma": [VALOR 8-18]
  }},
  "recursos": {{
    "HP M√°ximo": [CALCULAR: dado_classe √ó n√≠vel + CON√ón√≠vel],
    "HP Atual": [IGUAL ao HP M√°ximo],
    "Dados de Vida": "[Ex: 5d8 para Paladino n√≠vel 5]",
    "Profici√™ncia": "[+2 at√© n√≠vel 4, +3 para n√≠vel 5-8, +4 para 9-12, +5 para 13-16, +6 para 17-20]"
  }},
  "combate": {{
    "CA": [CALCULAR: 10 + mod_DES + armadura],
    "Iniciativa": [modificador de Destreza com sinal: +2, -1, etc],
    "Velocidade": "9m",
    "Ataques": ["[ARMA 1]: +[b√¥nus] para acertar, [dano]+[mod]", "[ARMA 2]: +[b√¥nus] para acertar, [dano]+[mod]"]
  }},
  "equipamento": {{
    "Armas": ["[LISTAR 2-3 armas apropriadas com b√¥nus m√°gico se n√≠vel alto]"],
    "Armadura": "[TIPO de armadura apropriada (ex: Cota de Malha, Armadura de Placas +1)]",
    "Itens": ["[LISTAR 6-10 itens: po√ß√µes, ferramentas, itens mundanos]"],
    "Dinheiro": "[QUANTIDADE apropriada] PO"
  }},
  "magia": {{
    "N√≠vel de Conjurador": "[N√öMERO ou 'N√£o possui']",
    "CD de Magia": "[CALCULAR: 8 + profici√™ncia + modificador_atributo ou 'N/A']",
    "B√¥nus de Ataque": "[profici√™ncia + modificador ou 'N/A']",
    "Espa√ßos de Magia": "[Ex: 4/3/2 ou por n√≠vel conforme classe ou 'N/A']",
    "Magias Conhecidas": ["[LISTAR 8-12 magias apropriadas ao n√≠vel e classe, ou 'N√£o possui magias']"]
  }},
  "historia": {{
    "Personalidade": "[EXPANDIR {conceito} em 2-3 frases detalhadas]",
    "Ideais": "[CRIAR 1-2 ideais baseados na personalidade e background]",
    "V√≠nculos": "[CRIAR 1-2 v√≠nculos baseados em {historia} e {objetivos}]",
    "Defeitos": "[CRIAR 1-2 defeitos interessantes e balanceados]",
    "Hist√≥ria": "[ESCREVER 3-4 par√°grafos completos integrando: {aparencia}, {historia}, {objetivos} de forma coesa e envolvente]"
  }}
}}

**VALIDA√á√ÉO FINAL OBRIGAT√ìRIA:**
‚úì TODOS os campos t√™m valores reais (n√£o "‚Äî", "A definir", ou vazios)
‚úì Atributos somam entre 70-78 (m√©todo padr√£o 4d6 descartando menor)
‚úì HP calculado corretamente conforme dado de vida da classe
‚úì CA inclui armadura apropriada
‚úì Ataques t√™m b√¥nus de ataque e dano calculados
‚úì Equipamento faz sentido para o n√≠vel e classe
‚úì Magias apropriadas para n√≠vel de conjurador
‚úì Hist√≥ria √© rica, coerente e bem desenvolvida

**RETORNE APENAS O JSON PURO - SEM TEXTO ANTES OU DEPOIS, SEM MARKDOWN, SEM EXPLICA√á√ïES.**"""

            historico = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ]
            
            conteudo_bruto = await chamar_groq(historico, max_tokens=2500)
            
            # Tenta parsear JSON estruturado
            secoes_estruturadas = None
            try:
                conteudo_limpo = conteudo_bruto.strip()
                
                # Remove markdown
                if "```" in conteudo_limpo:
                    import re
                    json_match = re.search(r'```(?:json)?\s*(\{.*?\})\s*```', conteudo_limpo, re.DOTALL)
                    if json_match:
                        conteudo_limpo = json_match.group(1)
                
                # Extrai JSON
                inicio = conteudo_limpo.find('{')
                fim = conteudo_limpo.rfind('}') + 1
                if inicio >= 0 and fim > inicio:
                    conteudo_limpo = conteudo_limpo[inicio:fim]
                
                # Parseia
                secoes_estruturadas = json.loads(conteudo_limpo)
                
                # Valida
                if not isinstance(secoes_estruturadas, dict) or not secoes_estruturadas:
                    raise ValueError("JSON inv√°lido")
                
                print(f"‚úÖ JSON OK! {len(secoes_estruturadas)} se√ß√µes")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erro JSON: {e}")
                # Fallback b√°sico
                secoes_estruturadas = {
                    "basico": {"Nome": nome, "Ra√ßa": raca, "Classe": classe, "N√≠vel": nivel},
                    "atributos": {"For√ßa": 10, "Destreza": 10, "Constitui√ß√£o": 10, "Intelig√™ncia": 10, "Sabedoria": 10, "Carisma": 10},
                    "recursos": {},
                    "combate": {},
                    "equipamento": {},
                    "magia": {},
                    "historia": {"Personalidade": conceito, "Apar√™ncia": aparencia, "Hist√≥ria": historia, "Objetivos": objetivos}
                }
                await ctx.author.send("‚ö†Ô∏è IA teve dificuldades. Criada ficha b√°sica. Use `!editarficha` para completar!")
            
            # Salva ficha
            chave = key_from_name(f"{ctx.author.id}_{nome}")
            fichas_personagens[chave] = {
                "nome": nome,
                "sistema": sistema,
                "autor": ctx.author.id,
                "criada_em": "estruturada",
                "secoes": secoes_estruturadas,
                "conteudo": conteudo_bruto
            }
            
            if salvar_fichas_agora():
                print(f"‚úÖ Ficha estruturada '{nome}' salva para user {ctx.author.id}")
            
            # Mostra ficha com navega√ß√£o
            if secoes_estruturadas and any(secoes_estruturadas.values()):
                view = FichaNavigationView(fichas_personagens[chave], sistema)
                await ctx.author.send(
                    content="‚úÖ **Ficha Criada com Sucesso!**",
                    embed=view.get_embed(),
                    view=view
                )
            else:
                await ctx.author.send(
                    embed=discord.Embed(
                        title=f"‚ö†Ô∏è Ficha Criada (Formato Simplificado)",
                        description=(
                            f"**{nome}** foi criado, mas em formato simplificado.\n\n"
                            f"**Dados B√°sicos:**\n"
                            f"‚Ä¢ Ra√ßa: {raca}\n"
                            f"‚Ä¢ Classe: {classe}\n"
                            f"‚Ä¢ Conceito: {conceito}\n\n"
                            f"**Hist√≥ria:** {historia[:200]}...\n\n"
                            f"üí° **Dica:** Use `!editarficha {nome}` para adicionar atributos e equipamento."
                        ),
                        color=discord.Color.orange()
                    ).set_footer(text="Sistema: " + SISTEMAS_DISPONIVEIS[sistema]['nome'])
                )
            
        except asyncio.TimeoutError:
            await ctx.author.send(
                "‚è∞ Tempo esgotado!\n\n"
                "üí° **Dica:** Prepare suas respostas longas (hist√≥ria, apar√™ncia) "
                "em um editor de texto antes e cole quando chegar a pergunta.\n\n"
                "Use `!criarficha` novamente quando estiver pronto!"
            )

    # ========== VER FICHA COM NAVEGA√á√ÉO ==========
    @bot.command(name="verficha")
    async def ver_ficha(ctx, *, nome: str = None):
        """Visualiza uma ficha com navega√ß√£o por p√°ginas."""
        if not nome:
            await ctx.send("‚ùå Use `!verficha <nome>`.")
            return
        
        sessao = sessoes_ativas.get(ctx.channel.id)
        
        if sessao:
            # Em sess√£o - permite ver fichas dos participantes
            participantes = [sessao["mestre_id"]] + sessao["jogadores"]
            ficha_encontrada = None
            sistema_encontrado = None
            
            for user_id in participantes:
                chave, ficha = encontrar_ficha(user_id, nome)
                if ficha:
                    ficha_encontrada = ficha
                    sistema_encontrado = ficha.get("sistema", "dnd5e")
                    break
            
            if not ficha_encontrada:
                await ctx.send(f"‚ùå Ficha '{nome}' n√£o encontrada entre os participantes!")
                return
            
            view = FichaNavigationView(ficha_encontrada, sistema_encontrado)
            await ctx.send(embed=view.get_embed(), view=view)
            
        else:
            # Fora de sess√£o - apenas pr√≥prias fichas
            chave, ficha = encontrar_ficha(ctx.author.id, nome)
            if not ficha:
                await ctx.send(f"‚ùå Ficha '{nome}' n√£o encontrada!")
                return
            
            sistema = ficha.get("sistema", "dnd5e")
            view = FichaNavigationView(ficha, sistema)
            await ctx.send(embed=view.get_embed(), view=view)

    # ========== OUTROS COMANDOS (mantidos da vers√£o anterior) ==========
    
    @bot.command(name="ficha")
    async def ficha_cmd(ctx, *, nome: str = None):
        """Cria ficha r√°pida ESTRUTURADA com IA."""
        if not nome:
            await ctx.send("‚ùå Use `!ficha <nome>` para cria√ß√£o r√°pida ou `!criarficha` para modo interativo estruturado.")
            return

        sistema = sistemas_rpg.get(ctx.author.id, "dnd5e")
        system_prompt = get_system_prompt(sistema)
        estrutura = get_estrutura_ficha(sistema)
        sistema_nome = SISTEMAS_DISPONIVEIS[sistema]['nome']

        await ctx.send(f"üìù Criando ficha estruturada de **{nome}** em {sistema_nome}...")

        # Gera exemplo JSON din√¢mico baseado na estrutura
        exemplo_secoes = []
        for secao in estrutura["secoes"]:
            campos = estrutura["campos"][secao]
            campos_exemplo = {campo: f"[preencher {campo}]" for campo in campos}
            exemplo_secoes.append(f'  "{secao}": {json.dumps(campos_exemplo, ensure_ascii=False, indent=4)}')
        
        exemplo_json = "{\n" + ",\n".join(exemplo_secoes) + "\n}"

        prompt = f"""Crie uma ficha de personagem COMPLETA e BALANCEADA para {sistema_nome}.

**PERSONAGEM:** {nome}

**INSTRU√á√ïES OBRIGAT√ìRIAS:**
1. PREENCHA 100% dos campos - NUNCA deixe vazio, com "‚Äî" ou "A definir"
2. Crie valores apropriados para o sistema {sistema_nome}
3. Seja criativo mas coerente com as regras do sistema
4. Hist√≥ria deve ter 3-4 par√°grafos completos
5. Todos os valores num√©ricos devem ser calculados corretamente

**USE ESTA ESTRUTURA JSON EXATA:**

{exemplo_json}

**REGRAS:**
- Nome do personagem: {nome}
- TODOS os campos devem ter valores reais e completos
- Use terminologia correta do sistema
- Seja detalhado em descri√ß√µes e hist√≥ria
- Calcule valores num√©ricos apropriados

**RETORNE APENAS O JSON - SEM MARKDOWN, SEM TEXTO EXTRA.**"""

        historico = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt}
        ]

        conteudo_bruto = await chamar_groq(historico, max_tokens=2500)
        
        # Parser JSON robusto
        secoes_estruturadas = None
        try:
            conteudo_limpo = conteudo_bruto.strip()
            
            # Remove markdown
            if "```" in conteudo_limpo:
                import re
                json_match = re.search(r'```(?:json)?\s*(\{.*?\})\s*```', conteudo_limpo, re.DOTALL)
                if json_match:
                    conteudo_limpo = json_match.group(1)
            
            # Extrai JSON
            inicio = conteudo_limpo.find('{')
            fim = conteudo_limpo.rfind('}') + 1
            if inicio >= 0 and fim > inicio:
                conteudo_limpo = conteudo_limpo[inicio:fim]
            
            # Parseia
            secoes_estruturadas = json.loads(conteudo_limpo)
            
            # Valida que n√£o est√° vazio
            if not isinstance(secoes_estruturadas, dict) or not secoes_estruturadas:
                raise ValueError("JSON vazio")
            
            # Valida que tem pelo menos a se√ß√£o "basico"
            if "basico" not in secoes_estruturadas:
                raise ValueError("Falta se√ß√£o 'basico'")
            
            print(f"‚úÖ Ficha estruturada criada: {len(secoes_estruturadas)} se√ß√µes")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao parsear JSON: {e}")
            print(f"Conte√∫do recebido: {conteudo_bruto[:500]}...")
            
            # Fallback gen√©rico baseado na estrutura
            secoes_estruturadas = {}
            for secao in estrutura["secoes"]:
                secoes_estruturadas[secao] = {}
                for campo in estrutura["campos"][secao]:
                    if "Nome" in campo:
                        secoes_estruturadas[secao][campo] = nome
                    elif any(x in campo for x in ["HP", "Vida", "PV", "Pontos"]):
                        secoes_estruturadas[secao][campo] = 30
                    elif any(x in campo for x in ["For√ßa", "FOR", "Destreza", "DES"]):
                        secoes_estruturadas[secao][campo] = 10
                    else:
                        secoes_estruturadas[secao][campo] = "‚Äî"
            
            await ctx.send("‚ö†Ô∏è IA teve dificuldades. Ficha b√°sica criada. Use `!editarficha` para completar!")
        
        # Salva ficha
        chave = key_from_name(f"{ctx.author.id}_{nome}")
        fichas_personagens[chave] = {
            "nome": nome,
            "sistema": sistema,
            "autor": ctx.author.id,
            "criada_em": "estruturada_rapida",
            "secoes": secoes_estruturadas,
            "conteudo": conteudo_bruto
        }
        
        salvar_fichas_agora()
        print(f"‚úÖ Ficha '{nome}' salva para sistema {sistema}")
        
        # Mostra ficha com navega√ß√£o
        view = FichaNavigationView(fichas_personagens[chave], sistema)
        await ctx.send(
            content=f"‚úÖ **Ficha Criada: {nome}**\nüí° Use `!criarficha` para modo interativo detalhado.",
            embed=view.get_embed(),
            view=view
        )

    @bot.command(name="minhasfichas")
    async def minhas_fichas(ctx, sistema_filtro: str = None):
        """Lista suas fichas."""
        user_id = ctx.author.id
        fichas_user = {k: v for k, v in fichas_personagens.items() if v.get("autor") == user_id}
        
        if not fichas_user:
            await ctx.send(f"‚ùå Voc√™ n√£o tem fichas salvas ainda.\nüí° Use `!ficha <nome>` ou `!criarficha` para criar uma!")
            return

        if sistema_filtro:
            sistema_filtro = resolver_alias(sistema_filtro.lower())
            fichas_user = {k: v for k, v in fichas_user.items() if v.get("sistema") == sistema_filtro}

        total = len(fichas_user)
        sistemas_dict = {}
        for f in fichas_user.values():
            sistemas_dict.setdefault(f["sistema"], []).append(f)

        descricao = f"Total: {total} ficha(s)\n\n"
        for s, lista in sistemas_dict.items():
            descricao += f"üé≤ {SISTEMAS_DISPONIVEIS[s]['nome']} ({len(lista)})\n"
            for f in lista:
                nome = f['nome']
                tipo = " üìã" if "secoes" in f and f["secoes"] else " üìÑ"
                descricao += f"‚Ä¢ {nome}{tipo}\n"
            descricao += "\n"

        await ctx.send(
            embed=discord.Embed(
                title="üìö Suas Fichas de Personagem",
                description=descricao[:4000],
                color=discord.Color.blurple(),
            ).set_footer(text="üìã = Estruturada (com p√°ginas) | üìÑ = Formato antigo | Use !verficha <nome>")
        )

    @bot.command(name="deletarficha")
    async def deletar_ficha(ctx, *, nome: str = None):
        """Deleta uma ficha."""
        if not nome:
            await ctx.send("‚ùå Use `!deletarficha <nome>`.")
            return
        
        chave, ficha = encontrar_ficha(ctx.author.id, nome)
        if not ficha:
            await ctx.send(f"‚ùå Ficha '{nome}' n√£o encontrada!")
            return

        del fichas_personagens[chave]
        salvar_fichas_agora()
        
        await ctx.send(f"üóëÔ∏è Ficha **{ficha['nome']}** deletada com sucesso.")

    @bot.command(name="converterficha")
    async def converter_ficha(ctx, novo_sistema: str, *, nome_personagem: str = None):
        """Converte ficha entre sistemas mantendo conceito."""
        if not nome_personagem:
            await ctx.send("‚ùå Use: `!converterficha <sistema> <nome>`\nüí° Exemplo: `!converterficha cthulhu Thorin`")
            return

        novo_sistema_original = novo_sistema
        novo_sistema = resolver_alias(novo_sistema.lower())
        
        if novo_sistema not in SISTEMAS_DISPONIVEIS:
            await ctx.send(f"‚ùå Sistema `{novo_sistema_original}` inv√°lido.\nüí° Use `!sistemas` para ver todos dispon√≠veis.")
            return

        chave, ficha = encontrar_ficha(ctx.author.id, nome_personagem)
        if not ficha:
            await ctx.send(f"‚ùå Ficha '{nome_personagem}' n√£o encontrada!")
            return

        atual = ficha.get("sistema", "dnd5e")
        if atual == novo_sistema:
            await ctx.send("‚ö†Ô∏è A ficha j√° √© desse sistema.")
            return

        await ctx.send(f"üîÑ Convertendo **{ficha['nome']}** de {SISTEMAS_DISPONIVEIS[atual]['nome']} para {SISTEMAS_DISPONIVEIS[novo_sistema]['nome']}...")

        # Extrai dados da ficha original
        if "secoes" in ficha and ficha["secoes"]:
            # Ficha estruturada - extrai dados-chave
            secoes_orig = ficha["secoes"]
            dados_basicos = secoes_orig.get("basico", {})
            atributos = secoes_orig.get("atributos", {})
            historia_secao = secoes_orig.get("historia", {})
            
            descricao_personagem = f"""
Personagem: {ficha['nome']}
Conceito: {dados_basicos.get('Classe', dados_basicos.get('Arqu√©tipo', 'Aventureiro'))}
Ra√ßa/Tipo: {dados_basicos.get('Ra√ßa', dados_basicos.get('Metatipo', dados_basicos.get('Cl√£', 'Humano')))}
Atributos principais: {', '.join([f'{k}:{v}' for k, v in list(atributos.items())[:3]])}
Personalidade: {historia_secao.get('Personalidade', 'A definir')}
Hist√≥ria: {historia_secao.get('Hist√≥ria', historia_secao.get('Background', 'A definir'))}
"""
        else:
            # Ficha em formato texto - usa conte√∫do direto
            descricao_personagem = f"Ficha original:\n{ficha.get('conteudo', '')[:500]}"

        # Monta prompt de convers√£o
        prompt = f"""Converta o seguinte personagem de {SISTEMAS_DISPONIVEIS[atual]['nome']} para {SISTEMAS_DISPONIVEIS[novo_sistema]['nome']}.

IMPORTANTE: Mantenha o CONCEITO, PERSONALIDADE e PODER RELATIVO do personagem, mas adapte completamente as mec√¢nicas para o novo sistema.

{descricao_personagem}

Retorne a ficha COMPLETA no formato JSON estruturado:

{{
  "basico": {{}},
  "atributos": {{}},
  "recursos": {{}},
  "combate": {{}},
  "equipamento": {{}},
  "magia": {{}},
  "historia": {{}}
}}

Preencha TODOS os campos apropriados para {SISTEMAS_DISPONIVEIS[novo_sistema]['nome']}. Seja balanceado e completo."""

        historico = [
            {"role": "system", "content": get_system_prompt(novo_sistema)},
            {"role": "user", "content": prompt},
        ]

        convertido = await chamar_groq(historico, max_tokens=2000)
        
        if not convertido or "Erro" in convertido:
            await ctx.send(f"‚ö†Ô∏è Erro ao converter ficha via IA: {convertido}")
            return

        # Tenta parsear JSON estruturado
        try:
            conteudo_limpo = convertido.strip()
            if conteudo_limpo.startswith("```"):
                conteudo_limpo = conteudo_limpo.split("```")[1]
                if conteudo_limpo.startswith("json"):
                    conteudo_limpo = conteudo_limpo[4:]
            
            secoes_convertidas = json.loads(conteudo_limpo)
        except json.JSONDecodeError:
            # Se falhar, usa formato texto mas avisa
            secoes_convertidas = {}
            await ctx.send("‚ö†Ô∏è Convers√£o em formato texto. Recomendo recriar com `!criarficha`.")

        # Cria nova ficha convertida
        nome_sistema = SISTEMAS_DISPONIVEIS[novo_sistema]['nome'].strip()
        novo_nome = f"{ficha['nome']} ({nome_sistema})"
        nova_chave = key_from_name(f"{ctx.author.id}_{novo_nome}")

        fichas_personagens[nova_chave] = {
            "nome": novo_nome,
            "sistema": novo_sistema,
            "autor": ctx.author.id,
            "convertida_de": atual,
            "secoes": secoes_convertidas,
            "conteudo": convertido  # Backup
        }

        if salvar_fichas_agora():
            print(f"‚úÖ Ficha convertida '{novo_nome}' salva para user {ctx.author.id}")
        else:
            await ctx.send("‚ö†Ô∏è Aviso: A convers√£o foi feita mas pode n√£o ter sido salva corretamente.")

        # Mostra resultado com navega√ß√£o
        if secoes_convertidas:
            view = FichaNavigationView(fichas_personagens[nova_chave], novo_sistema)
            await ctx.send(
                embed=view.get_embed(),
                view=view
            )
        else:
            await ctx.send(
                embed=discord.Embed(
                    title="‚úÖ Ficha Convertida!",
                    description=f"Nova ficha: **{novo_nome}**\n\n{convertido[:3000]}",
                    color=discord.Color.green(),
                ).set_footer(text="Use !verficha para visualizar com navega√ß√£o")
            )

    @bot.command(name="exportarficha")
    async def exportar_ficha(ctx, *, nome: str = None):
        """Exporta ficha como JSON."""
        if not nome:
            await ctx.send("‚ùå Use `!exportarficha <nome>`.")
            return
        
        chave, ficha = encontrar_ficha(ctx.author.id, nome)
        if not ficha:
            await ctx.send("‚ùå Ficha n√£o encontrada.")
            return

        json_data = json.dumps(ficha, indent=2, ensure_ascii=False)
        arquivo = f"{ficha['nome']}.json"
        
        with open(arquivo, "w", encoding="utf-8") as f:
            f.write(json_data)

        await ctx.send("üì¶ Ficha exportada!", file=discord.File(arquivo))
        os.remove(arquivo)

    @bot.command(name="editarficha")
    async def editar_ficha(ctx, *, nome: str = None):
        """Edita uma ficha existente de forma interativa."""
        if not nome:
            await ctx.send("‚ùå Use `!editarficha <nome>`.")
            return
        
        chave, ficha = encontrar_ficha(ctx.author.id, nome)
        if not ficha:
            await ctx.send(f"‚ùå Ficha '{nome}' n√£o encontrada!")
            return
        
        sistema = ficha.get("sistema", "dnd5e")
        
        await ctx.send(
            f"‚úèÔ∏è **Editando ficha: {ficha['nome']}**\n\n"
            f"O que voc√™ deseja fazer?\n"
            f"1Ô∏è‚É£ - Editar atributos/estat√≠sticas\n"
            f"2Ô∏è‚É£ - Adicionar equipamento/item\n"
            f"3Ô∏è‚É£ - Modificar hist√≥ria/background\n"
            f"4Ô∏è‚É£ - Edi√ß√£o livre (descreva o que quer mudar)\n"
            f"‚ùå - Digite `cancelar` para sair\n\n"
            f"Digite o n√∫mero da op√ß√£o:"
        )
        
        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel
        
        try:
            # Escolha da op√ß√£o
            msg = await bot.wait_for('message', check=check, timeout=60.0)
            if msg.content.lower() == 'cancelar':
                return await ctx.send("‚ùå Edi√ß√£o cancelada.")
            
            opcao = msg.content.strip()
            
            if opcao == "1":
                await ctx.send("üìä Descreva as mudan√ßas nos atributos/estat√≠sticas (ex: 'aumentar For√ßa para 18, adicionar +2 em Constitui√ß√£o'):")
                msg = await bot.wait_for('message', check=check, timeout=120.0)
                if msg.content.lower() == 'cancelar':
                    return await ctx.send("‚ùå Edi√ß√£o cancelada.")
                instrucao = f"Atualize os atributos e estat√≠sticas conforme solicitado: {msg.content}"
                
            elif opcao == "2":
                await ctx.send("‚öîÔ∏è Descreva o equipamento/item a adicionar:")
                msg = await bot.wait_for('message', check=check, timeout=120.0)
                if msg.content.lower() == 'cancelar':
                    return await ctx.send("‚ùå Edi√ß√£o cancelada.")
                instrucao = f"Adicione o seguinte equipamento ao invent√°rio do personagem: {msg.content}"
                
            elif opcao == "3":
                await ctx.send("üìñ Descreva as mudan√ßas na hist√≥ria/background:")
                msg = await bot.wait_for('message', check=check, timeout=180.0)
                if msg.content.lower() == 'cancelar':
                    return await ctx.send("‚ùå Edi√ß√£o cancelada.")
                instrucao = f"Atualize a hist√≥ria e background do personagem: {msg.content}"
                
            elif opcao == "4":
                await ctx.send("‚úçÔ∏è Descreva livremente o que deseja mudar na ficha:")
                msg = await bot.wait_for('message', check=check, timeout=180.0)
                if msg.content.lower() == 'cancelar':
                    return await ctx.send("‚ùå Edi√ß√£o cancelada.")
                instrucao = msg.content
                
            else:
                return await ctx.send("‚ùå Op√ß√£o inv√°lida! Use `!editarficha <nome>` novamente.")
            
            # Processa edi√ß√£o com IA
            await ctx.send(f"‚ú® Processando altera√ß√µes em **{ficha['nome']}**...")
            
            system_prompt = get_system_prompt(sistema)
            
            # Extrai conte√∫do atual (estruturado ou texto)
            if "secoes" in ficha and ficha["secoes"]:
                conteudo_atual = json.dumps(ficha["secoes"], indent=2, ensure_ascii=False)
                formato = "JSON estruturado"
            else:
                conteudo_atual = ficha.get("conteudo", "")
                formato = "texto"
            
            prompt = f"""Voc√™ deve editar uma ficha de personagem de {SISTEMAS_DISPONIVEIS[sistema]['nome']}.

**INSTRU√á√ÉO DO JOGADOR:**
{instrucao}

**FICHA ATUAL (formato {formato}):**
{conteudo_atual}

**REGRAS CR√çTICAS:**
1. MANTENHA toda a estrutura JSON original
2. Apenas ALTERE os campos mencionados na instru√ß√£o
3. PRESERVE todos os outros valores inalterados
4. Se adicionar itens/equipamento, ADICIONE √† lista existente (n√£o substitua tudo)
5. PREENCHA campos vazios se a instru√ß√£o pedir

**IMPORTANTE:** 
- Se formato √© JSON, retorne JSON PURO (sem ```json ou markdown)
- TODOS os campos n√£o mencionados devem permanecer EXATAMENTE iguais
- Valores calculados (HP, CA) s√≥ mudam se atributos mudarem

**RETORNE APENAS O JSON COMPLETO ATUALIZADO, SEM TEXTO EXTRA:**"""

            historico = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ]
            
            conteudo_novo = await chamar_groq(historico, max_tokens=2500)

            historico = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ]
            
            conteudo_novo = await chamar_groq(historico, max_tokens=2000)
            
            if not conteudo_novo or "Erro" in conteudo_novo:
                await ctx.send(f"‚ö†Ô∏è Erro ao editar ficha: {conteudo_novo}")
                return
            
            # Atualiza ficha
            if "secoes" in ficha and ficha["secoes"]:
                # Tenta parsear JSON estruturado
                try:
                    conteudo_limpo = conteudo_novo.strip()
                    if conteudo_limpo.startswith("```"):
                        conteudo_limpo = conteudo_limpo.split("```")[1]
                        if conteudo_limpo.startswith("json"):
                            conteudo_limpo = conteudo_limpo[4:]
                    
                    fichas_personagens[chave]["secoes"] = json.loads(conteudo_limpo)
                except json.JSONDecodeError:
                    await ctx.send("‚ö†Ô∏è Erro ao processar edi√ß√£o estruturada. Salvando como texto.")
                    fichas_personagens[chave]["conteudo"] = conteudo_novo
            else:
                fichas_personagens[chave]["conteudo"] = conteudo_novo
            
            if salvar_fichas_agora():
                print(f"‚úÖ Ficha '{ficha['nome']}' atualizada para user {ctx.author.id}")
            else:
                await ctx.send("‚ö†Ô∏è Aviso: A edi√ß√£o foi feita mas pode n√£o ter sido salva corretamente.")
            
            # Mostra resultado
            if "secoes" in fichas_personagens[chave] and fichas_personagens[chave]["secoes"]:
                view = FichaNavigationView(fichas_personagens[chave], sistema)
                await ctx.send(
                    content="‚úÖ **Ficha Atualizada com Sucesso!**",
                    embed=view.get_embed(),
                    view=view
                )
            else:
                await ctx.send(
                    embed=discord.Embed(
                        title=f"‚úÖ Ficha Atualizada: {ficha['nome']}",
                        description=conteudo_novo[:4000],
                        color=discord.Color.blue(),
                    ).set_footer(text="Use !verficha para ver a ficha completa")
                )
            
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ Tempo esgotado! Use `!editarficha <nome>` novamente.")

    print("‚úÖ fichas_estruturadas carregado com sucesso!")