# commands/fichas_edicao.py
"""Comandos de cria√ß√£o interativa e edi√ß√£o de fichas."""

import discord
from discord.ext import commands
import asyncio
import json

from config import fichas_personagens, sistemas_rpg
from sistemas_rpg import SISTEMAS_DISPONIVEIS
from utils import chamar_groq, get_system_prompt, key_from_name
from core.ficha_helpers import salvar_fichas_agora, encontrar_ficha, get_estrutura_ficha
from views.ficha_views import FichaNavigationView


def register_fichas_edicao_commands(bot: commands.Bot):
    """Registra comandos de cria√ß√£o interativa e edi√ß√£o."""

    @bot.command(name="criarficha")
    async def criar_ficha_estruturada(ctx):
        """Cria uma ficha estruturada atrav√©s de perguntas interativas."""
        sistema = sistemas_rpg.get(ctx.author.id, "dnd5e")
        system_prompt = get_system_prompt(sistema)
        estrutura = get_estrutura_ficha(sistema)
        
        # Deleta comando do usu√°rio
        try:
            await ctx.message.delete()
        except:
            pass
        
        # Envia tudo por DM
        try:
            # Mensagem inicial com preview das perguntas
            await ctx.author.send(
                f"üìù **Cria√ß√£o de Ficha Estruturada**\n"
                f"Sistema: {SISTEMAS_DISPONIVEIS[sistema]['nome']}\n\n"
                f"**Farei estas 8 perguntas para voc√™:**\n"
                f"1Ô∏è‚É£ Nome do personagem\n"
                f"2Ô∏è‚É£ Ra√ßa/Ancestralidade\n"
                f"3Ô∏è‚É£ Classe/Profiss√£o\n"
                f"4Ô∏è‚É£ N√≠vel ou Idade\n"
                f"5Ô∏è‚É£ Personalidade (3-5 tra√ßos)\n"
                f"6Ô∏è‚É£ Apar√™ncia f√≠sica\n"
                f"7Ô∏è‚É£ Background/Origem\n"
                f"8Ô∏è‚É£ Objetivos/Motiva√ß√µes\n\n"
                f"üí° **Dica importante:** Para evitar timeout durante a cria√ß√£o, "
                f"prepare suas respostas mais longas (hist√≥ria, apar√™ncia, objetivos) "
                f"em outro lugar e cole quando chegar a pergunta!\n\n"
                f"Digite `cancelar` a qualquer momento para parar.\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"**1/8** - Qual o **nome** do seu personagem?"
            )
            
            is_dm = isinstance(ctx.channel, discord.DMChannel)

            if not is_dm:
                await ctx.send(
                    f"‚úÖ {ctx.author.mention}, processo de cria√ß√£o iniciado no privado! "
                    f"Confira sua DM.",
                    delete_after=10
                )
        
        except discord.Forbidden:
            await ctx.send(
                f"‚ùå {ctx.author.mention}, n√£o consigo te enviar DM! "
                f"Habilite mensagens diretas nas configura√ß√µes.",
                delete_after=15
            )
            return
        
        def check(m):
            return m.author == ctx.author and isinstance(m.channel, discord.DMChannel)
        
        try:
            # Nome
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            nome = msg.content
            
            # Ra√ßa/Ancestralidade
            await ctx.author.send(f"**2/8** - Qual a **ra√ßa/ancestralidade** de {nome}?")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            raca = msg.content
            
            # Classe/Arqu√©tipo
            await ctx.author.send(f"**3/8** - Qual a **classe/profiss√£o** de {nome}?")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            classe = msg.content
            
            # N√≠vel/Idade
            await ctx.author.send(f"**4/8** - Qual o **n√≠vel ou idade** de {nome}? (Ex: N√≠vel 5, ou 28 anos)")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            nivel = msg.content
            
            # Conceito/Personalidade
            await ctx.author.send(f"**5/8** - Descreva a **personalidade** de {nome} (3-5 tra√ßos):")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            conceito = msg.content
            
            # Apar√™ncia
            await ctx.author.send(f"**6/8** - Descreva a **apar√™ncia f√≠sica** de {nome}:")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            aparencia = msg.content
            
            # Background/Hist√≥ria
            await ctx.author.send(f"**7/8** - Qual o **background ou origem** de {nome}?")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            historia = msg.content
            
            # Objetivos/Motiva√ß√µes
            await ctx.author.send(f"**8/8** - Quais os **objetivos ou motiva√ß√µes** de {nome}?")
            msg = await bot.wait_for('message', check=check, timeout=None)
            if msg.content.lower() == 'cancelar':
                return await ctx.author.send("‚ùå Cria√ß√£o de ficha cancelada.")
            objetivos = msg.content
            
            # Gera ficha estruturada com IA
            await ctx.author.send(f"‚ú® Gerando ficha estruturada de **{nome}** com IA...")
            
            # Monta prompt espec√≠fico para formato estruturado
            prompt = f"""Crie uma ficha de personagem COMPLETA, DETALHADA e BALANCEADA para {SISTEMAS_DISPONIVEIS[sistema]['nome']}.

**INFORMA√á√ïES FORNECIDAS PELO JOGADOR:**
- Nome: {nome}
- Ra√ßa/Ancestralidade: {raca}
- Classe/Profiss√£o: {classe}
- N√≠vel/Idade: {nivel}
- Personalidade: {conceito}
- Apar√™ncia F√≠sica: {aparencia}
- Background/Origem: {historia}
- Objetivos/Motiva√ß√µes: {objetivos}

**INSTRU√á√ïES OBRIGAT√ìRIAS:**
1. EXPANDA todas as informa√ß√µes - transforme respostas curtas em descri√ß√µes ricas
2. CALCULE todos os valores num√©ricos apropriados ao n√≠vel
3. PREENCHA 100% dos campos - NENHUM campo pode ficar vazio, com "‚Äî" ou "A definir"
4. CRIE equipamento inicial completo e apropriado
5. ADICIONE habilidades de classe do n√≠vel apropriado
6. DESENVOLVA hist√≥ria em 3-4 par√°grafos envolventes

**FORMATO JSON OBRIGAT√ìRIO - PREENCHA TODOS OS CAMPOS:**

{{
  "basico": {{
    "Nome": "{nome}",
    "Ra√ßa": "[EXPANDIR {raca} com detalhes de sub-ra√ßa]",
    "Classe": "[EXPANDIR {classe} com arqu√©tipo/caminho]",
    "N√≠vel": "[EXTRAIR n√∫mero de: {nivel}]",
    "Antecedente": "[CRIAR baseado em: {historia}]",
    "Alinhamento": "[DEFINIR baseado na personalidade]"
  }},
  "atributos": {{
    "For√ßa": [VALOR 8-18],
    "Destreza": [VALOR 8-18],
    "Constitui√ß√£o": [VALOR 8-18],
    "Intelig√™ncia": [VALOR 8-18],
    "Sabedoria": [VALOR 8-18],
    "Carisma": [VALOR 8-18]
  }},
  "recursos": {{
    "HP M√°ximo": [CALCULAR: dado_classe √ó n√≠vel + CON√ón√≠vel],
    "HP Atual": [IGUAL ao HP M√°ximo],
    "Dados de Vida": "[Ex: 5d8 para Paladino n√≠vel 5]",
    "Profici√™ncia": "[+2 at√© n√≠vel 4, +3 para n√≠vel 5-8, +4 para 9-12, +5 para 13-16, +6 para 17-20]"
  }},
  "combate": {{
    "CA": [CALCULAR: 10 + mod_DES + armadura],
    "Iniciativa": [modificador de Destreza com sinal: +2, -1, etc],
    "Velocidade": "9m",
    "Ataques": ["[ARMA 1]: +[b√¥nus] para acertar, [dano]+[mod]", "[ARMA 2]: +[b√¥nus] para acertar, [dano]+[mod]"]
  }},
  "equipamento": {{
    "Armas": ["[LISTAR 2-3 armas apropriadas com b√¥nus m√°gico se n√≠vel alto]"],
    "Armadura": "[TIPO de armadura apropriada (ex: Cota de Malha, Armadura de Placas +1)]",
    "Itens": ["[LISTAR 6-10 itens: po√ß√µes, ferramentas, itens mundanos]"],
    "Dinheiro": "[QUANTIDADE apropriada] PO"
  }},
  "magia": {{
    "N√≠vel de Conjurador": "[N√öMERO ou 'N√£o possui']",
    "CD de Magia": "[CALCULAR: 8 + profici√™ncia + modificador_atributo ou 'N/A']",
    "B√¥nus de Ataque": "[profici√™ncia + modificador ou 'N/A']",
    "Espa√ßos de Magia": "[Ex: 4/3/2 ou por n√≠vel conforme classe ou 'N/A']",
    "Magias Conhecidas": ["[LISTAR 8-12 magias apropriadas ao n√≠vel e classe, ou 'N√£o possui magias']"]
  }},
  "historia": {{
    "Personalidade": "[EXPANDIR {conceito} em 2-3 frases detalhadas]",
    "Ideais": "[CRIAR 1-2 ideais baseados na personalidade e background]",
    "V√≠nculos": "[CRIAR 1-2 v√≠nculos baseados em {historia} e {objetivos}]",
    "Defeitos": "[CRIAR 1-2 defeitos interessantes e balanceados]",
    "Hist√≥ria": "[ESCREVER 3-4 par√°grafos completos integrando: {aparencia}, {historia}, {objetivos} de forma coesa e envolvente]"
  }}
}}

**VALIDA√á√ÉO FINAL OBRIGAT√ìRIA:**
‚úì TODOS os campos t√™m valores reais (n√£o "‚Äî", "A definir", ou vazios)
‚úì Atributos somam entre 70-78 (m√©todo padr√£o 4d6 descartando menor)
‚úì HP calculado corretamente conforme dado de vida da classe
‚úì CA inclui armadura apropriada
‚úì Ataques t√™m b√¥nus de ataque e dano calculados
‚úì Equipamento faz sentido para o n√≠vel e classe
‚úì Magias apropriadas para n√≠vel de conjurador
‚úì Hist√≥ria √© rica, coerente e bem desenvolvida

**RETORNE APENAS O JSON PURO - SEM TEXTO ANTES OU DEPOIS, SEM MARKDOWN, SEM EXPLICA√á√ïES.**"""

            historico = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ]
            
            conteudo_bruto = await chamar_groq(historico, max_tokens=2500)
            
            # Tenta parsear JSON estruturado
            secoes_estruturadas = None
            try:
                conteudo_limpo = conteudo_bruto.strip()
                
                # Remove markdown
                if "```" in conteudo_limpo:
                    import re
                    json_match = re.search(r'```(?:json)?\s*(\{.*?\})\s*```', conteudo_limpo, re.DOTALL)
                    if json_match:
                        conteudo_limpo = json_match.group(1)
                
                # Extrai JSON
                inicio = conteudo_limpo.find('{')
                fim = conteudo_limpo.rfind('}') + 1
                if inicio >= 0 and fim > inicio:
                    conteudo_limpo = conteudo_limpo[inicio:fim]
                
                # Parseia
                secoes_estruturadas = json.loads(conteudo_limpo)
                
                # Valida
                if not isinstance(secoes_estruturadas, dict) or not secoes_estruturadas:
                    raise ValueError("JSON inv√°lido")
                
                print(f"‚úÖ JSON OK! {len(secoes_estruturadas)} se√ß√µes")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erro JSON: {e}")
                # Fallback b√°sico
                secoes_estruturadas = {
                    "basico": {"Nome": nome, "Ra√ßa": raca, "Classe": classe, "N√≠vel": nivel},
                    "atributos": {"For√ßa": 10, "Destreza": 10, "Constitui√ß√£o": 10, "Intelig√™ncia": 10, "Sabedoria": 10, "Carisma": 10},
                    "recursos": {},
                    "combate": {},
                    "equipamento": {},
                    "magia": {},
                    "historia": {"Personalidade": conceito, "Apar√™ncia": aparencia, "Hist√≥ria": historia, "Objetivos": objetivos}
                }
                await ctx.author.send("‚ö†Ô∏è IA teve dificuldades. Criada ficha b√°sica. Use `!editarficha` para completar!")
            
            # Salva ficha
            chave = key_from_name(f"{ctx.author.id}_{nome}")
            fichas_personagens[chave] = {
                "nome": nome,
                "sistema": sistema,
                "autor": ctx.author.id,
                "criada_em": "estruturada",
                "secoes": secoes_estruturadas,
                "conteudo": conteudo_bruto
            }
            
            if salvar_fichas_agora():
                print(f"‚úÖ Ficha estruturada '{nome}' salva para user {ctx.author.id}")
            
            # Mostra ficha com navega√ß√£o
            if secoes_estruturadas and any(secoes_estruturadas.values()):
                view = FichaNavigationView(fichas_personagens[chave], sistema)
                await ctx.author.send(
                    content="‚úÖ **Ficha Criada com Sucesso!**",
                    embed=view.get_embed(),
                    view=view
                )
            else:
                await ctx.author.send(
                    embed=discord.Embed(
                        title=f"‚ö†Ô∏è Ficha Criada (Formato Simplificado)",
                        description=(
                            f"**{nome}** foi criado, mas em formato simplificado.\n\n"
                            f"**Dados B√°sicos:**\n"
                            f"‚Ä¢ Ra√ßa: {raca}\n"
                            f"‚Ä¢ Classe: {classe}\n"
                            f"‚Ä¢ Conceito: {conceito}\n\n"
                            f"**Hist√≥ria:** {historia[:200]}...\n\n"
                            f"üí° **Dica:** Use `!editarficha {nome}` para adicionar atributos e equipamento."
                        ),
                        color=discord.Color.orange()
                    ).set_footer(text="Sistema: " + SISTEMAS_DISPONIVEIS[sistema]['nome'])
                )
            
        except asyncio.TimeoutError:
            await ctx.author.send(
                "‚è∞ Tempo esgotado!\n\n"
                "üí° **Dica:** Prepare suas respostas longas (hist√≥ria, apar√™ncia) "
                "em um editor de texto antes e cole quando chegar a pergunta.\n\n"
                "Use `!criarficha` novamente quando estiver pronto!"
            )

    @bot.command(name="editarficha")
    async def editar_ficha(ctx, *, nome: str = None):
        """Edita uma ficha existente de forma interativa."""
        if not nome:
            await ctx.send("‚ùå Use `!editarficha <nome>`.")
            return
        
        chave, ficha = encontrar_ficha(ctx.author.id, nome)
        if not ficha:
            await ctx.send(f"‚ùå Ficha '{nome}' n√£o encontrada!")
            return
        
        sistema = ficha.get("sistema", "dnd5e")
        
        await ctx.send(
            f"‚úèÔ∏è **Editando ficha: {ficha['nome']}**\n\n"
            f"O que voc√™ deseja fazer?\n"
            f"1Ô∏è‚É£ - Editar atributos/estat√≠sticas\n"
            f"2Ô∏è‚É£ - Adicionar equipamento/item\n"
            f"3Ô∏è‚É£ - Modificar hist√≥ria/background\n"
            f"4Ô∏è‚É£ - Edi√ß√£o livre (descreva o que quer mudar)\n"
            f"‚ùå - Digite `cancelar` para sair\n\n"
            f"Digite o n√∫mero da op√ß√£o:"
        )
        
        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel
        
        try:
            # Escolha da op√ß√£o
            msg = await bot.wait_for('message', check=check, timeout=60.0)
            if msg.content.lower() == 'cancelar':
                return await ctx.send("‚ùå Edi√ß√£o cancelada.")
            
            opcao = msg.content.strip()
            
            if opcao == "1":
                await ctx.send("üìä Descreva as mudan√ßas nos atributos/estat√≠sticas (ex: 'aumentar For√ßa para 18, adicionar +2 em Constitui√ß√£o'):")
                msg = await bot.wait_for('message', check=check, timeout=120.0)
                if msg.content.lower() == 'cancelar':
                    return await ctx.send("‚ùå Edi√ß√£o cancelada.")
                instrucao = f"Atualize os atributos e estat√≠sticas conforme solicitado: {msg.content}"
                
            elif opcao == "2":
                await ctx.send("‚öîÔ∏è Descreva o equipamento/item a adicionar:")
                msg = await bot.wait_for('message', check=check, timeout=120.0)
                if msg.content.lower() == 'cancelar':
                    return await ctx.send("‚ùå Edi√ß√£o cancelada.")
                instrucao = f"Adicione o seguinte equipamento ao invent√°rio do personagem: {msg.content}"
                
            elif opcao == "3":
                await ctx.send("üìñ Descreva as mudan√ßas na hist√≥ria/background:")
                msg = await bot.wait_for('message', check=check, timeout=180.0)
                if msg.content.lower() == 'cancelar':
                    return await ctx.send("‚ùå Edi√ß√£o cancelada.")
                instrucao = f"Atualize a hist√≥ria e background do personagem: {msg.content}"
                
            elif opcao == "4":
                await ctx.send("‚úçÔ∏è Descreva livremente o que deseja mudar na ficha:")
                msg = await bot.wait_for('message', check=check, timeout=180.0)
                if msg.content.lower() == 'cancelar':
                    return await ctx.send("‚ùå Edi√ß√£o cancelada.")
                instrucao = msg.content
                
            else:
                return await ctx.send("‚ùå Op√ß√£o inv√°lida! Use `!editarficha <nome>` novamente.")
            
            # Processa edi√ß√£o com IA
            await ctx.send(f"‚ú® Processando altera√ß√µes em **{ficha['nome']}**...")
            
            system_prompt = get_system_prompt(sistema)
            
            # Extrai conte√∫do atual (estruturado ou texto)
            if "secoes" in ficha and ficha["secoes"]:
                conteudo_atual = json.dumps(ficha["secoes"], indent=2, ensure_ascii=False)
                formato = "JSON estruturado"
            else:
                conteudo_atual = ficha.get("conteudo", "")
                formato = "texto"
            
            # PROMPT CR√çTICO REFORMULADO
            prompt = f"""Voc√™ receber√° uma ficha de personagem completa e uma instru√ß√£o de edi√ß√£o.

**SISTEMA:** {SISTEMAS_DISPONIVEIS[sistema]['nome']}

**INSTRU√á√ÉO DO JOGADOR:**
{instrucao}

**FICHA ATUAL COMPLETA (formato {formato}):**
{conteudo_atual}

**INSTRU√á√ïES OBRIGAT√ìRIAS:**
1. Leia toda a ficha acima
2. Aplique APENAS as mudan√ßas mencionadas na instru√ß√£o
3. RETORNE A FICHA COMPLETA com as altera√ß√µes aplicadas
4. MANTENHA todos os outros campos EXATAMENTE como est√£o
5. Se a instru√ß√£o pedir para ADICIONAR itens, adicione √† lista existente (n√£o substitua)
6. Se a instru√ß√£o pedir para ALTERAR valores, altere apenas esses valores
7. Valores calculados (HP, CA, b√¥nus) devem ser recalculados se atributos mudarem

**FORMATO DE RETORNO:**
Retorne o JSON COMPLETO da ficha com as modifica√ß√µes aplicadas.
N√ÉO retorne apenas os campos alterados.
N√ÉO adicione texto explicativo antes ou depois.
N√ÉO use markdown (```json).

**EXEMPLO:**
Se a instru√ß√£o for "aumentar For√ßa para 18", voc√™ deve:
- Alterar o campo "For√ßa" de [valor atual] para 18
- Recalcular b√¥nus de ataque corpo a corpo se necess√°rio
- Recalcular dano de armas corpo a corpo
- MANTER todos os outros campos inalterados
- RETORNAR a ficha completa com essas altera√ß√µes

Agora, retorne a ficha COMPLETA com as altera√ß√µes aplicadas:"""

            historico = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ]
            
            conteudo_novo = await chamar_groq(historico, max_tokens=2500)
            
            if not conteudo_novo or "Erro" in conteudo_novo:
                await ctx.send(f"‚ö†Ô∏è Erro ao editar ficha: {conteudo_novo}")
                return
            
            # Parser MAIS RIGOROSO
            if "secoes" in ficha and ficha["secoes"]:
                try:
                    import re
                    conteudo_limpo = conteudo_novo.strip()
                    
                    # Remove markdown
                    if "```" in conteudo_limpo:
                        json_match = re.search(r'```(?:json)?\s*(\{.*?\})\s*```', conteudo_limpo, re.DOTALL)
                        if json_match:
                            conteudo_limpo = json_match.group(1)
                    
                    # Remove texto antes/depois do JSON
                    inicio = conteudo_limpo.find('{')
                    fim = conteudo_limpo.rfind('}') + 1
                    if inicio >= 0 and fim > inicio:
                        conteudo_limpo = conteudo_limpo[inicio:fim]
                    
                    # Parseia
                    nova_secao = json.loads(conteudo_limpo)
                    
                    # VALIDA√á√ÉO CR√çTICA: Verifica se tem pelo menos as mesmas se√ß√µes
                    secoes_antigas = set(ficha["secoes"].keys())
                    secoes_novas = set(nova_secao.keys())
                    
                    if len(secoes_novas) < len(secoes_antigas) * 0.7:  # Perdeu mais de 30% das se√ß√µes
                        raise ValueError(f"Edi√ß√£o incompleta: apenas {len(secoes_novas)}/{len(secoes_antigas)} se√ß√µes retornadas")
                    
                    # VALIDA√á√ÉO: Conta campos n√£o-vazios
                    campos_preenchidos = 0
                    campos_totais = 0
                    
                    for secao_nome, conteudo_secao in nova_secao.items():
                        if isinstance(conteudo_secao, dict):
                            for campo, valor in conteudo_secao.items():
                                campos_totais += 1
                                if valor and valor not in ["‚Äî", "A definir", "", None]:
                                    campos_preenchidos += 1
                    
                    if campos_totais > 0 and campos_preenchidos / campos_totais < 0.5:
                        raise ValueError(f"Muitos campos vazios: {campos_preenchidos}/{campos_totais} preenchidos")
                    
                    # Detecta mudan√ßas
                    campos_editados = []
                    for secao_nome, conteudo_secao in nova_secao.items():
                        if isinstance(conteudo_secao, dict):
                            for campo, valor in conteudo_secao.items():
                                valor_antigo = ficha["secoes"].get(secao_nome, {}).get(campo)
                                if str(valor) != str(valor_antigo):
                                    campos_editados.append(f"{secao_nome}.{campo}: {valor_antigo} ‚Üí {valor}")
                    
                    if not campos_editados:
                        await ctx.send("‚ö†Ô∏è Nenhuma mudan√ßa foi detectada. A IA pode n√£o ter entendido a instru√ß√£o. Tente ser mais espec√≠fico.")
                        return
                    
                    # Aplica mudan√ßas
                    fichas_personagens[chave]["secoes"] = nova_secao
                    
                    print(f"‚úÖ {len(campos_editados)} campos editados:")
                    for mudanca in campos_editados[:10]:  # Mostra at√© 10 mudan√ßas
                        print(f"  - {mudanca}")
                    
                except json.JSONDecodeError as je:
                    print(f"‚ö†Ô∏è Erro JSON: {je}")
                    await ctx.send(
                        f"‚ö†Ô∏è A IA retornou dados inv√°lidos.\n"
                        f"**Tente novamente com uma instru√ß√£o mais simples.**\n"
                        f"Exemplo: `Aumentar For√ßa para 18`"
                    )
                    return
                    
                except ValueError as ve:
                    print(f"‚ö†Ô∏è Valida√ß√£o falhou: {ve}")
                    await ctx.send(
                        f"‚ö†Ô∏è A edi√ß√£o ficou incompleta.\n"
                        f"**Detalhes:** {ve}\n\n"
                        f"üí° Tente uma instru√ß√£o mais espec√≠fica:\n"
                        f"‚Ä¢ `Aumentar For√ßa para 18 e Destreza para 16`\n"
                        f"‚Ä¢ `Adicionar Espada Longa +1 ao equipamento`\n"
                        f"‚Ä¢ `Mudar hist√≥ria para: [nova hist√≥ria]`"
                    )
                    return
            else:
                fichas_personagens[chave]["conteudo"] = conteudo_novo
            
            if salvar_fichas_agora():
                print(f"‚úÖ Ficha '{ficha['nome']}' atualizada para user {ctx.author.id}")
            else:
                await ctx.send("‚ö†Ô∏è Aviso: A edi√ß√£o foi feita mas pode n√£o ter sido salva corretamente.")
            
            # Mostra resultado
            if "secoes" in fichas_personagens[chave] and fichas_personagens[chave]["secoes"]:
                view = FichaNavigationView(fichas_personagens[chave], sistema)
                
                # Feedback detalhado
                resumo_mudancas = "\n".join([f"‚Ä¢ {m}" for m in campos_editados[:5]])
                if len(campos_editados) > 5:
                    resumo_mudancas += f"\n‚Ä¢ ... e mais {len(campos_editados) - 5} mudan√ßas"
                
                await ctx.send(
                    content=f"‚úÖ **Ficha Atualizada com Sucesso!**\n\n**Mudan√ßas aplicadas:**\n{resumo_mudancas}",
                    embed=view.get_embed(),
                    view=view
                )
            else:
                await ctx.send(
                    embed=discord.Embed(
                        title=f"‚úÖ Ficha Atualizada: {ficha['nome']}",
                        description=conteudo_novo[:4000],
                        color=discord.Color.blue(),
                    ).set_footer(text="Use !verficha para ver a ficha completa")
                )
            
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ Tempo esgotado! Use `!editarficha <nome>` novamente.")