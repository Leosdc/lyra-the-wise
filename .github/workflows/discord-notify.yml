name: ü§ñ Auto Version & Discord Embed (Lyra Final Full)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  auto_version:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Detectar n√∫mero de vers√£o
      - name: Detectar n√∫mero de vers√£o no commit
        id: version
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MSG" =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION=$(echo "$COMMIT_MSG" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+")
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "SKIP=true" >> $GITHUB_ENV
          fi

      # 3Ô∏è‚É£ Atualizar badge no README
      - name: Atualizar badge de vers√£o no README
        if: env.SKIP != 'true'
        run: |
          sed -i -E "s/Version-[0-9]+\.[0-9]+\.[0-9]+/Version-${VERSION}/" readme.md
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add readme.md
          git commit -m "Atualiza badge para ${VERSION}" || true
          git push || true

      # 4Ô∏è‚É£ Criar/atualizar tag
      - name: Criar tag autom√°tica (modo h√≠brido)
        if: env.SKIP != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          COMMIT_MSG="${{ github.event.head_commit.message }}"
          FORCE_TAG=false

          if [[ "$COMMIT_MSG" =~ v[0-9]+\.[0-9]+\.[0-9]+! ]]; then
            FORCE_TAG=true
            VERSION=$(echo "$COMMIT_MSG" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+")
            echo "‚ö° Modo for√ßado ‚Äî reetiquetando ${VERSION}"
          fi

          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION$"; then
            if [ "$FORCE_TAG" = true ]; then
              git tag -f $VERSION
              git push -f https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git $VERSION
            else
              echo "Tag existente ‚Äî pulando cria√ß√£o."
              exit 0
            fi
          else
            git tag $VERSION
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git $VERSION
          fi

      # 5Ô∏è‚É£ Extrair changelog completo da √∫ltima vers√£o
      - name: Obter changelog completo
        if: env.SKIP != 'true'
        run: |
          LATEST_CHANGELOG=$(awk '
            /^## / {
              if (found) exit;
              found=1; next;
            }
            found
          ' changelog.md)

          if [ -z "$LATEST_CHANGELOG" ]; then
            LATEST_CHANGELOG="Nenhum changelog encontrado."
          fi

          echo "LATEST_CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$LATEST_CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 6Ô∏è‚É£ Enviar embed completo via cURL (fix JSON seguro)
      - name: Enviar notifica√ß√£o ao Discord (Embed)
        if: env.SKIP != 'true'
        run: |
          echo "üí¨ Preparando payload para o Discord..."

          # Escapa conte√∫do do changelog com seguran√ßa para JSON
          ESCAPED_CHANGELOG=$(echo "${{ env.LATEST_CHANGELOG }}" | jq -Rs .)

          PAYLOAD=$(jq -n \
            --arg repo "${{ github.repository }}" \
            --arg actor "${{ github.actor }}" \
            --arg msg "${{ github.event.head_commit.message }}" \
            --arg branch "${{ github.ref_name }}" \
            --arg sha "${{ github.sha }}" \
            --arg version "${{ env.VERSION }}" \
            --arg date "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" \
            --argjson changelog "$ESCAPED_CHANGELOG" \
            '{
              "username": "The Bard",
              "avatar_url": "https://raw.githubusercontent.com/Leosdc/lyra-the-wise/main/assets/lyra_avatar.png",
              "embeds": [
                {
                  "title": "üßô Nova vers√£o \($version) publicada automaticamente!",
                  "color": 11259375,
                  "fields": [
                    { "name": "üì¶ Reposit√≥rio", "value": "[\($repo)](https://github.com/\($repo))", "inline": true },
                    { "name": "üë§ Autor", "value": $actor, "inline": true },
                    { "name": "üïê Data", "value": $date, "inline": false },
                    { "name": "ü™∂ Changelog", "value": ("```md\n" + $changelog + "\n```"), "inline": false }
                  ],
                  "thumbnail": {
                    "url": "https://raw.githubusercontent.com/Leosdc/lyra-the-wise/main/assets/lyra_icon.png"
                  },
                  "footer": {
                    "text": "Lyra the Wise ‚Ä¢ Build autom√°tico do GitHub Actions"
                  },
                  "url": "https://github.com/\($repo)/releases/tag/\($version)"
                }
              ]
            }')

          echo "üì¶ Trecho do payload JSON:"
          echo "$PAYLOAD" | head -n 20

          echo "üöÄ Enviando para o Discord..."
          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "${{ secrets.DISCORD_WEBHOOK }}" \
            --fail --show-error --silent || (echo "‚ùå Falha ao enviar para o Discord" && exit 1)

      # 7Ô∏è‚É£ Confirma√ß√£o
      - name: Confirmar envio
        if: env.SKIP != 'true'
        run: echo "‚úÖ Vers√£o ${VERSION} publicada com sucesso e changelog completo enviado!"
