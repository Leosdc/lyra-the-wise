name: ü§ñ Auto Version & Discord Notify (Lyra Final v2)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write  # necess√°rio para criar tags e atualizar o README

jobs:
  auto_version:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Clona o reposit√≥rio
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Detecta n√∫mero de vers√£o no commit (ex: v2.4.0 ou v2.4.0!)
      - name: Detectar n√∫mero de vers√£o no commit
        id: version
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "üß© Mensagem do commit: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION=$(echo "$COMMIT_MSG" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+")
            echo "‚úÖ Vers√£o detectada: $VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Nenhuma vers√£o detectada ‚Äî commit normal."
            echo "SKIP=true" >> $GITHUB_ENV
          fi

      # 3Ô∏è‚É£ Atualiza badge de vers√£o no README.md
      - name: Atualizar badge de vers√£o no README
        if: env.SKIP != 'true'
        run: |
          echo "ü™Ñ Atualizando badge de vers√£o no README.md..."
          sed -i -E "s/Version-[0-9]+\.[0-9]+\.[0-9]+/Version-${VERSION}/" readme.md
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add readme.md
          git commit -m "Atualiza badge de vers√£o para ${VERSION}" || echo "üü° Nenhuma mudan√ßa detectada."
          git push || true

      # 4Ô∏è‚É£ Cria e envia a tag automaticamente (modo h√≠brido)
      - name: Criar tag autom√°tica (modo h√≠brido)
        if: env.SKIP != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          COMMIT_MSG="${{ github.event.head_commit.message }}"
          FORCE_TAG=false

          # Detecta se o commit cont√©m um "!" ap√≥s a vers√£o (ex: v2.5.0!)
          if [[ "$COMMIT_MSG" =~ v[0-9]+\.[0-9]+\.[0-9]+! ]]; then
            FORCE_TAG=true
            VERSION=$(echo "$COMMIT_MSG" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+")
            echo "‚ö° Modo for√ßado ativado ‚Äî tag ${VERSION} ser√° substitu√≠da."
          fi

          # Verifica se a tag existe no reposit√≥rio remoto
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION$"; then
            if [ "$FORCE_TAG" = true ]; then
              git tag -f $VERSION
              git push -f https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git $VERSION
              echo "üè∑Ô∏è Tag $VERSION recriada (for√ßada)."
            else
              echo "‚ö†Ô∏è A tag $VERSION j√° existe. Pulando cria√ß√£o (modo normal)."
              exit 0
            fi
          else
            git tag $VERSION
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git $VERSION
            echo "üè∑Ô∏è Tag $VERSION criada e enviada com sucesso!"
          fi

      # 5Ô∏è‚É£ Extrai SOMENTE o √∫ltimo changelog completo
      - name: Obter changelog recente
        if: env.SKIP != 'true'
        run: |
          echo "üìñ Extraindo √∫ltimo changelog completo..."
          # Captura bloco entre o primeiro "## " e o pr√≥ximo (ou fim do arquivo)
          LATEST_CHANGELOG=$(awk '
            /^## / {
              if (found) exit; 
              found=1; next
            }
            found
          ' changelog.md)

          # Remove espa√ßos extras e linhas vazias iniciais
          LATEST_CHANGELOG=$(echo "$LATEST_CHANGELOG" | sed '/^[[:space:]]*$/d')

          if [ -z "$LATEST_CHANGELOG" ]; then
            echo "‚ö†Ô∏è Nenhum changelog encontrado. Usando fallback."
            LATEST_CHANGELOG="Nenhum changelog dispon√≠vel nesta vers√£o."
          fi

          echo "LATEST_CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$LATEST_CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "üìú √öltimo changelog preparado (somente o mais recente)."

      # 6Ô∏è‚É£ Envia mensagem formatada (Markdown estilizado para Discord)
      - name: Enviar notifica√ß√£o ao Discord
        if: env.SKIP != 'true'
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            üßô **Nova vers√£o `${{ env.VERSION }}` publicada automaticamente!**
            üì¶ **Reposit√≥rio:** [${{ github.repository }}](https://github.com/${{ github.repository }})
            üë§ **Autor:** ${{ github.actor }}
            üïê **Data:** `${{ github.event.head_commit.timestamp }}`
            ü™∂ **Changelog:**
            ```md
            ${{ env.LATEST_CHANGELOG }}
            ```
            üîó [Ver no GitHub](https://github.com/${{ github.repository }}/releases/tag/${{ env.VERSION }})
            üß© *Lyra the Wise ‚Ä¢ Build autom√°tico do GitHub Actions*

      # 7Ô∏è‚É£ Confirma√ß√£o final no log
      - name: Confirmar envio
        if: env.SKIP != 'true'
        run: echo "‚úÖ Vers√£o $VERSION publicada, tag criada (ou for√ßada) e notifica√ß√£o entregue!"
