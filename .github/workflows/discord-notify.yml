name: ü§ñ Auto Version & Discord Embed (Lyra Stable Final)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  auto_version:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Detectar n√∫mero de vers√£o no commit
      - name: Detectar n√∫mero de vers√£o no commit
        id: version
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MSG" =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION=$(echo "$COMMIT_MSG" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+")
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "üßô Vers√£o detectada: $VERSION"
          else
            echo "SKIP=true" >> $GITHUB_ENV
            echo "‚ö†Ô∏è Nenhum n√∫mero de vers√£o encontrado no commit."
          fi

      # 3Ô∏è‚É£ Atualizar badge de vers√£o no README
      - name: Atualizar badge de vers√£o no README
        if: env.SKIP != 'true'
        run: |
          sed -i -E "s/Version-[0-9]+\.[0-9]+\.[0-9]+/Version-${VERSION}/" readme.md
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add readme.md
          git commit -m "üîñ Atualiza badge para ${VERSION}" || true
          git push || true

      # 4Ô∏è‚É£ Criar tag autom√°tica (modo seguro)
      - name: Criar tag autom√°tica (modo seguro)
        if: env.SKIP != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION$"; then
            echo "‚ö†Ô∏è Tag $VERSION j√° existe. Pulando cria√ß√£o."
          else
            git tag $VERSION
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git $VERSION
          fi

      # 5Ô∏è‚É£ Extrair changelog da √∫ltima vers√£o
      - name: Extrair changelog mais recente
        if: env.SKIP != 'true'
        run: |
          echo "üîç Extraindo changelog da vers√£o mais recente..."
          awk '
            /^## \[/ {
              if (found) exit;
              found=1; next;
            }
            found
          ' changelog.md > changelog_temp.md

          if [ ! -s changelog_temp.md ]; then
            echo "‚ö†Ô∏è Nenhum changelog encontrado."
            echo "Nenhum changelog encontrado." > changelog_temp.md
          fi

          echo "‚úÖ changelog_temp.md criado:"
          head -n 15 changelog_temp.md || true

      # 6Ô∏è‚É£ Enviar changelog ao Discord (somente √∫ltima vers√£o)
      - name: Enviar changelog mais recente ao Discord
        if: env.SKIP != 'true'
        run: |
          echo "üí¨ Preparando envio do changelog da √∫ltima vers√£o..."

          VERSION="${{ env.VERSION }}"
          REPO="${{ github.repository }}"
          ACTOR="${{ github.actor }}"
          SHA="${{ github.sha }}"
          DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          WEBHOOK="${{ secrets.DISCORD_WEBHOOK }}"

          CHANGELOG=$(jq -Rs . < changelog_temp.md)
          CHANGELOG_TEXT=$(jq -r . <<< "$CHANGELOG")
          echo "üìè Tamanho do changelog extra√≠do: $(echo "$CHANGELOG_TEXT" | wc -c) bytes"

          # Divide o changelog em blocos seguros
          echo "$CHANGELOG_TEXT" | fold -w 750 > changelog_parts.txt

          i=0
          while IFS= read -r chunk; do
            i=$((i+1))

            PAYLOAD=$(jq -n \
              --arg username "The Bard" \
              --arg avatar "https://raw.githubusercontent.com/Leosdc/lyra-the-wise/main/assets/lyra_avatar.png" \
              --arg version "$VERSION" \
              --arg repo "$REPO" \
              --arg actor "$ACTOR" \
              --arg date "$DATE" \
              --arg sha "$SHA" \
              --arg part "$chunk" \
              --arg partnum "$i" \
              '
              {
                "username": $username,
                "avatar_url": $avatar,
                "embeds": [
                  {
                    "title": ("üßô Nova vers√£o \($version) publicada! (Parte " + $partnum + ")"),
                    "color": 11259375,
                    "fields": [
                      { "name": "üì¶ Reposit√≥rio", "value": ("[\($repo)](https://github.com/\($repo))"), "inline": true },
                      { "name": "üë§ Autor", "value": $actor, "inline": true },
                      { "name": "üïê Data", "value": $date, "inline": false },
                      { "name": "ü™∂ Changelog", "value": ("```md\n" + $part + "\n```"), "inline": false }
                    ],
                    "thumbnail": { "url": "https://raw.githubusercontent.com/Leosdc/lyra-the-wise/main/assets/lyra_icon.png" },
                    "footer": { "text": "Lyra the Wise ‚Ä¢ Build autom√°tico do GitHub Actions" },
                    "url": ("https://github.com/\($repo)/commit/\($sha)")
                  }
                ]
              }')

            echo "üì¶ Enviando parte $i..."
            echo "$PAYLOAD" | jq . || echo "‚ö†Ô∏è Falha ao formatar payload."

            RESPONSE=$(curl -s -o response.txt -w "%{http_code}" \
              -X POST -H "Content-Type: application/json" \
              -d "$PAYLOAD" "$WEBHOOK")

            echo "üì® HTTP: $RESPONSE"
            cat response.txt || echo "(sem resposta)"
            sleep 2
          done

          echo "‚úÖ √öltima vers√£o enviada com sucesso!"

      # 7Ô∏è‚É£ Confirma√ß√£o final
      - name: Confirmar publica√ß√£o
        if: env.SKIP != 'true'
        run: echo "üéâ Vers√£o ${VERSION} publicada e changelog enviado ao Discord com sucesso!"
