      # 6Ô∏è‚É£ Enviar embed com log detalhado e debug do payload
      - name: Enviar notifica√ß√£o ao Discord
        if: env.SKIP != 'true'
        run: |
          echo "üí¨ Preparando payload para o Discord..."

          VERSION="${{ env.VERSION }}"
          REPO="${{ github.repository }}"
          ACTOR="${{ github.actor }}"
          SHA="${{ github.sha }}"
          DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')

          # L√™ changelog como string literal segura (JSON)
          CHANGELOG=$(jq -Rs . < changelog_temp.md)

          # Monta payload usando jq (com fun√ß√µes auxiliares)
          PAYLOAD=$(jq -n \
            --arg username "The Bard" \
            --arg avatar "https://raw.githubusercontent.com/Leosdc/lyra-the-wise/main/assets/lyra_avatar.png" \
            --arg version "$VERSION" \
            --arg repo "$REPO" \
            --arg actor "$ACTOR" \
            --arg date "$DATE" \
            --arg sha "$SHA" \
            --arg changelog "$CHANGELOG" \
            '
            def chunks(s; n):
              if (s|length) <= n then [s]
              else [ s[0:n] ] + chunks(s[n:]; n)
              end;

            def changelog_fields(s):
              (s | fromjson) as $txt
              | chunks($txt; 950)
              | to_entries
              | map({
                  "name": ("ü™∂ Parte " + ((.key + 1)|tostring)),
                  "value": ("```md\n" + .value + "\n```"),
                  "inline": false
                })
              | .[:22];

            {
              "username": $username,
              "avatar_url": $avatar,
              "embeds": [
                {
                  "title": ("üßô Nova vers√£o \($version) publicada!"),
                  "color": 11259375,
                  "fields": (
                    [
                      { "name": "üì¶ Reposit√≥rio", "value": ("[\($repo)](https://github.com/\($repo))"), "inline": true },
                      { "name": "üë§ Autor",       "value": $actor, "inline": true },
                      { "name": "üïê Data",        "value": $date,  "inline": false }
                    ]
                    +
                    (changelog_fields($changelog))
                  ),
                  "thumbnail": { "url": "https://raw.githubusercontent.com/Leosdc/lyra-the-wise/main/assets/lyra_icon.png" },
                  "footer":    { "text": "Lyra the Wise ‚Ä¢ Build autom√°tico do GitHub Actions" },
                  "url": ("https://github.com/\($repo)/commit/\($sha)")
                }
              ]
            }')

          echo "üì¶ Payload gerado (pr√©-envio):"
          echo "$PAYLOAD" | jq . || echo "‚ö†Ô∏è Falha ao formatar payload com jq."

          echo "üöÄ Enviando payload ao Discord (modo debug)..."
          RESPONSE=$(curl -v -s -o response.txt -w "%{http_code}" \
            -X POST -H "Content-Type: application/json" \
            -d "$PAYLOAD" "${{ secrets.DISCORD_WEBHOOK }}")

          echo "üì® C√≥digo HTTP retornado: $RESPONSE"
          echo "üìú Resposta completa do Discord:"
          cat response.txt || echo "‚ö†Ô∏è Nenhuma resposta capturada."

          if [ "$RESPONSE" -eq 204 ]; then
            echo "‚úÖ Embed enviado com sucesso (HTTP 204 - Sem conte√∫do)."
          elif [ "$RESPONSE" -eq 200 ]; then
            echo "‚úÖ Mensagem enviada com sucesso (HTTP 200)."
          else
            echo "‚ùå Falha ao enviar embed (HTTP $RESPONSE)."
          fi
