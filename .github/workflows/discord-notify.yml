name: ü§ñ Auto Version & Discord Embed (Lyra Stable)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  auto_version:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Detectar n√∫mero de vers√£o
      - name: Detectar n√∫mero de vers√£o no commit
        id: version
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MSG" =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION=$(echo "$COMMIT_MSG" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+")
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "SKIP=true" >> $GITHUB_ENV
          fi

      # 3Ô∏è‚É£ Atualizar badge de vers√£o no README
      - name: Atualizar badge de vers√£o no README
        if: env.SKIP != 'true'
        run: |
          sed -i -E "s/Version-[0-9]+\.[0-9]+\.[0-9]+/Version-${VERSION}/" readme.md
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add readme.md
          git commit -m "Atualiza badge para ${VERSION}" || true
          git push || true

      # 4Ô∏è‚É£ Criar tag autom√°tica segura
      - name: Criar tag autom√°tica (modo seguro)
        if: env.SKIP != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION$"; then
            echo "‚ö†Ô∏è Tag $VERSION j√° existe. Pulando cria√ß√£o."
          else
            git tag $VERSION
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git $VERSION
          fi

      # 5Ô∏è‚É£ Extrair changelog e salvar em arquivo seguro
      - name: Extrair changelog mais recente
        if: env.SKIP != 'true'
        run: |
          echo "üîç Extraindo changelog mais recente..."
          awk '
            /^## / {
              if (found) exit;
              found=1; next;
            }
            found
          ' changelog.md > changelog_temp.md

          if [ ! -s changelog_temp.md ]; then
            echo "Nenhum changelog encontrado." > changelog_temp.md
          fi

          echo "‚úÖ changelog_temp.md criado com sucesso."
          head -n 10 changelog_temp.md

      # 6Ô∏è‚É£ Enviar embed completo via cURL (divis√£o autom√°tica de partes)
      - name: Enviar notifica√ß√£o ao Discord
        if: env.SKIP != 'true'
        run: |
          echo "üí¨ Preparando payload para o Discord..."

          VERSION="${{ env.VERSION }}"
          REPO="${{ github.repository }}"
          ACTOR="${{ github.actor }}"
          SHA="${{ github.sha }}"
          DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')

          # Quebra o changelog em partes de at√© 1000 caracteres
          mapfile -t CHUNKS < <(fold -w 1000 changelog_temp.md)

          # Cria os campos JSON dinamicamente
          FIELDS_JSON=""
          INDEX=1
          for chunk in "${CHUNKS[@]}"; do
            CHUNK_ESCAPED=$(jq -Rs . <<< "$chunk")
            FIELDS_JSON+=$(jq -n --arg i "$INDEX" --arg c "$chunk" \
              '{name: ("ü™∂ Parte " + $i), value: ("```md\n" + $c + "\n```"), inline: false}' | jq -c .)
            FIELDS_JSON+=","
            INDEX=$((INDEX+1))
          done

          # Remove v√≠rgula final
          FIELDS_JSON="[${FIELDS_JSON%,}]"

          # Monta payload completo
          PAYLOAD=$(jq -n \
            --arg username "The Bard" \
            --arg avatar "https://raw.githubusercontent.com/Leosdc/lyra-the-wise/main/assets/lyra_avatar.png" \
            --arg version "$VERSION" \
            --arg repo "$REPO" \
            --arg actor "$ACTOR" \
            --arg date "$DATE" \
            --arg sha "$SHA" \
            --argjson changelog "$FIELDS_JSON" \
            '{
              "username": $username,
              "avatar_url": $avatar,
              "embeds": [
                {
                  "title": ("üßô Nova vers√£o " + $version + " publicada automaticamente!"),
                  "color": 11259375,
                  "fields": (
                    [
                      {"name": "üì¶ Reposit√≥rio", "value": "[" + $repo + "](https://github.com/" + $repo + ")", "inline": true},
                      {"name": "üë§ Autor", "value": $actor, "inline": true},
                      {"name": "üïê Data", "value": $date, "inline": false}
                    ] + $changelog
                  ),
                  "thumbnail": {"url": "https://raw.githubusercontent.com/Leosdc/lyra-the-wise/main/assets/lyra_icon.png"},
                  "footer": {"text": "Lyra the Wise ‚Ä¢ Build autom√°tico do GitHub Actions"},
                  "url": ("https://github.com/" + $repo + "/commit/" + $sha)
                }
              ]
            }')

          echo "üöÄ Enviando payload ao Discord..."
          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "${{ secrets.DISCORD_WEBHOOK }}" \
            --fail --show-error --silent || (echo "‚ùå Falha ao enviar para o Discord" && exit 1)

          echo "‚úÖ Embed enviado com sucesso!"

      # 7Ô∏è‚É£ Confirma√ß√£o final
      - name: Confirmar envio
        if: env.SKIP != 'true'
        run: echo "‚úÖ Vers√£o ${VERSION} publicada e changelog enviado com sucesso!"
