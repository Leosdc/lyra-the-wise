name: 🤖 Auto Version & Discord Embed (Lyra Debug Mode)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  auto_version:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout
      - name: Checkout do repositório
        uses: actions/checkout@v4

      # 2️⃣ Detectar número de versão no commit
      - name: Detectar número de versão no commit
        id: version
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MSG" =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION=$(echo "$COMMIT_MSG" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+")
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "🧙 Versão detectada: $VERSION"
          else
            echo "SKIP=true" >> $GITHUB_ENV
            echo "⚠️ Nenhum número de versão encontrado no commit."
          fi

      # 3️⃣ Atualizar badge de versão no README
      - name: Atualizar badge de versão no README
        if: env.SKIP != 'true'
        run: |
          sed -i -E "s/Version-[0-9]+\.[0-9]+\.[0-9]+/Version-${VERSION}/" readme.md
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add readme.md
          git commit -m "🔖 Atualiza badge para ${VERSION}" || true
          git push || true

      # 4️⃣ Criar tag automática (modo seguro)
      - name: Criar tag automática (modo seguro)
        if: env.SKIP != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION$"; then
            echo "⚠️ Tag $VERSION já existe. Pulando criação."
          else
            git tag $VERSION
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git $VERSION
          fi

      # 5️⃣ Extrair changelog da última versão
      - name: Extrair changelog mais recente
        if: env.SKIP != 'true'
        run: |
          echo "🔍 Extraindo changelog da versão mais recente..."
          awk '
            /^## \[/ {
              if (found) exit;
              found=1; next;
            }
            found
          ' changelog.md > changelog_temp.md

          if [ ! -s changelog_temp.md ]; then
            echo "⚠️ Nenhum changelog encontrado."
            echo "Nenhum changelog encontrado." > changelog_temp.md
          fi

          echo "✅ changelog_temp.md criado:"
          head -n 15 changelog_temp.md || true

      # 6️⃣ Enviar changelog mais recente ao Discord (modo DEBUG)
      - name: Enviar changelog mais recente ao Discord (modo debug)
        if: env.SKIP != 'true'
        run: |
          echo "💬 Preparando envio do changelog da última versão (modo debug)..."

          VERSION="${{ env.VERSION }}"
          REPO="${{ github.repository }}"
          ACTOR="${{ github.actor }}"
          SHA="${{ github.sha }}"
          DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          WEBHOOK="${{ secrets.DISCORD_WEBHOOK }}"

          echo "📜 Carregando changelog real..."
          CHANGELOG_TEXT=$(cat changelog_temp.md)
          echo "📏 Tamanho original: $(echo "$CHANGELOG_TEXT" | wc -c) bytes"

          # Divide o texto em partes de ~900 caracteres reais
          echo "$CHANGELOG_TEXT" | awk '
            BEGIN { part=1; count=0 }
            {
              len=length($0)+1
              if (count+len>900) { part++; count=0 }
              file=sprintf("changelog_part_%03d.txt", part)
              print $0 >> file
              count+=len
            }'

          total_parts=$(ls changelog_part_*.txt | wc -l)
          echo "📚 Total de partes a enviar: $total_parts"

          part_count=0
          for FILE in changelog_part_*.txt; do
            part_count=$((part_count+1))
            CHUNK=$(cat "$FILE")
            SIZE=$(echo "$CHUNK" | wc -c)

            echo -e "\033[36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
            echo -e "📦 Parte $part_count / $total_parts — Tamanho: ${SIZE} bytes"
            echo -e "\033[36m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"

            if [ $part_count -eq 1 ]; then
              INTRO="🎶 *O bardo toca sua harpa e anuncia a nova versão...* ✨"
            else
              INTRO=""
            fi

            PAYLOAD=$(jq -n \
              --arg username "The Bard" \
              --arg avatar "https://raw.githubusercontent.com/Leosdc/lyra-the-wise/main/assets/lyra_avatar.png" \
              --arg version "$VERSION" \
              --arg repo "$REPO" \
              --arg actor "$ACTOR" \
              --arg date "$DATE" \
              --arg sha "$SHA" \
              --arg part "$CHUNK" \
              --arg partnum "$part_count" \
              --arg total "$total_parts" \
              --arg intro "$INTRO" \
              '
              {
                "username": $username,
                "avatar_url": $avatar,
                "content": $intro,
                "embeds": [
                  {
                    "title": ("🧙 Nova versão \($version) publicada! (Parte " + $partnum + " de " + $total + ")"),
                    "color": 11259375,
                    "fields": [
                      { "name": "📦 Repositório", "value": ("[\($repo)](https://github.com/\($repo))"), "inline": true },
                      { "name": "👤 Autor", "value": $actor, "inline": true },
                      { "name": "🕐 Data", "value": $date, "inline": false },
                      { "name": "🪶 Changelog", "value": ("```md\n" + $part + "\n```"), "inline": false },
                      { "name": "🧩 Debug Info", "value": ("Parte: " + $partnum + " / " + $total + " | Tamanho: " + ($part|length|tostring) + " chars"), "inline": false }
                    ],
                    "thumbnail": { "url": "https://raw.githubusercontent.com/Leosdc/lyra-the-wise/main/assets/lyra_icon.png" },
                    "footer": { "text": "Lyra the Wise • Build automático do GitHub Actions" },
                    "url": ("https://github.com/\($repo)/commit/\($sha)")
                  }
                ]
              }')

            echo "🔍 Pré-visualização do payload (primeiras 25 linhas):"
            echo "$PAYLOAD" | head -n 25

            echo "🚀 Enviando para Discord..."
            RESPONSE=$(curl -v -s -o response.txt -w "%{http_code}" \
              -X POST -H "Content-Type: application/json" \
              -d "$PAYLOAD" "$WEBHOOK")

            echo "📨 Código HTTP retornado: $RESPONSE"
            echo "📜 Resposta do Discord:"
            cat response.txt || echo "(sem resposta)"

            if [ "$RESPONSE" -eq 204 ]; then
              echo -e "\033[32m✅ Parte $part_count enviada com sucesso!\033[0m"
            else
              echo -e "\033[31m❌ Erro ao enviar parte $part_count (HTTP $RESPONSE)\033[0m"
            fi
            sleep 2
          done

          echo -e "\033[32m✅ Todas as partes do changelog foram processadas!\033[0m"

      # 7️⃣ Confirmação final
      - name: Confirmar publicação
        if: env.SKIP != 'true'
        run: echo "🎉 Versão ${VERSION} publicada e changelog enviado ao Discord com sucesso!"
