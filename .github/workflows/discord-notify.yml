name: ü§ñ Auto Version & Discord Notify

on:
  push:
    branches:
      - main
  workflow_dispatch:  # permite execu√ß√£o manual tamb√©m

permissions:
  contents: write  # necess√°rio para criar tags e atualizar arquivos

jobs:
  auto_version:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Clona o reposit√≥rio
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Detecta se o commit cont√©m n√∫mero de vers√£o (ex: v2.4.0)
      - name: Detectar n√∫mero de vers√£o no commit
        id: version
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "üß© Mensagem do commit: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION=$(echo "$COMMIT_MSG" | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+")
            echo "‚úÖ Vers√£o detectada: $VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Nenhuma vers√£o detectada ‚Äî commit normal."
            echo "SKIP=true" >> $GITHUB_ENV
          fi

      # 3Ô∏è‚É£ Atualiza o badge de vers√£o no README.md
      - name: Atualizar badge de vers√£o no README
        if: env.SKIP != 'true'
        run: |
          echo "ü™Ñ Atualizando badge de vers√£o no README.md..."
          sed -i -E "s/Version-[0-9]+\.[0-9]+\.[0-9]+/Version-${VERSION}/" readme.md
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add readme.md
          git commit -m "Atualiza badge de vers√£o para ${VERSION}" || echo "üü° Nenhuma mudan√ßa no badge."
          git push || true

      # 4Ô∏è‚É£ Cria e envia a tag automaticamente
      - name: Criar tag autom√°tica
        if: env.SKIP != 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag $VERSION
          git push origin $VERSION
          echo "üè∑Ô∏è Tag $VERSION criada e enviada."

      # 5Ô∏è‚É£ L√™ o √∫ltimo changelog
      - name: Obter changelog recente
        if: env.SKIP != 'true'
        run: |
          LATEST_CHANGELOG=$(awk '/^## /{if (NR!=1) exit} {print}' changelog.md)
          echo "LATEST_CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$LATEST_CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "üìú √öltimo changelog preparado."

      # 6Ô∏è‚É£ Envia mensagem formatada para o Discord
      - name: Enviar notifica√ß√£o ao Discord
        if: env.SKIP != 'true'
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            üéØ **Nova vers√£o `${{ env.VERSION }}` publicada automaticamente!**
            üßô **Reposit√≥rio:** [`${{ github.repository }}`](https://github.com/${{ github.repository }})
            üë§ **Autor:** `${{ github.actor }}`
            üïê **Data:** `${{ github.event.head_commit.timestamp }}`
            üìù **Changelog:**
            ${{ env.LATEST_CHANGELOG }}

      # 7Ô∏è‚É£ Confirma√ß√£o no log da Action
      - name: Confirmar envio
        if: env.SKIP != 'true'
        run: echo "‚úÖ Vers√£o $VERSION publicada, badge atualizado e notifica√ß√£o enviada!"
